diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml
new file mode 100644
index 0000000..47a8273
--- /dev/null
+++ b/.github/workflows/ci.yaml
@@ -0,0 +1,95 @@
+# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
+# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
+
+name: Node.js CI
+
+on:
+  push:
+    branches: ["main"]
+  pull_request:
+    branches: ["main", "development"]
+env:
+  GEMINI_MODEL: "gemini-1.5-pro-latest"
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    env:
+      CI: true
+
+    strategy:
+      matrix:
+        node-version: [22.x]
+        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
+
+    steps:
+      - uses: actions/checkout@v4
+      - name: Use Node.js ${{ matrix.node-version }}
+        uses: actions/setup-node@v4
+        with:
+          node-version: ${{ matrix.node-version }}
+          cache: "npm"
+      - name: Install dependencies
+        run: npm ci
+      - name: Generate prisma client
+        run: npx prisma generate
+      - name: Check code format
+        run: npm run check-format
+      - name: Lint code
+        run: npm run lint
+      - name: Run test fixtures
+        run: npm test -- --coverage
+      - name: Generate coverage summary
+        uses: ArtiomTr/jest-coverage-report-action@v2
+        with:
+          threshold: 70
+          annotations: all
+      - name: Build artifacts
+        run: npm run build --if-present
+
+  ai-review:
+    runs-on: ubuntu-latest
+    needs: [build]
+    permissions:
+      contents: read
+      pull-requests: write
+    name: AI review
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+      - name: "Get diff of the pull request"
+        id: get_diff
+        shell: bash
+        env:
+          PULL_REQUEST_HEAD_REF: "${{ github.event.pull_request.head.ref }}"
+          PULL_REQUEST_BASE_REF: "${{ github.event.pull_request.base.ref }}"
+        run: |-
+          git fetch origin "${{ env.PULL_REQUEST_HEAD_REF }}"
+          git fetch origin "${{ env.PULL_REQUEST_BASE_REF }}"
+          git checkout "${{ env.PULL_REQUEST_HEAD_REF }}"
+          git diff "origin/${{ env.PULL_REQUEST_BASE_REF }}" > "diff.txt"
+          {
+            echo "pull_request_diff<<EOF";
+            cat "diff.txt";
+            echo 'EOF';
+          } >> $GITHUB_OUTPUT
+          cat diff.txt
+      - uses: Stone-IT-Cloud/gemini-code-review-action@0.0.4
+        name: "Code Review by Gemini AI"
+        id: review
+        with:
+          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
+          github_token: ${{ secrets.GITHUB_TOKEN }}
+          github_repository: ${{ github.repository }}
+          github_pull_request_number: ${{ github.event.pull_request.number }}
+          git_commit_hash: ${{ github.event.pull_request.head.sha }}
+          model: ${{ env.GEMINI_MODEL }}
+          pull_request_diff: ${{ steps.get_diff.outputs.pull_request_diff }}
+          extra_prompt: |-
+            Please write your review in English as an experienced nodejs and typescript developer.
+          log_level: "INFO"
+      - name: Check for errors (example)
+        if: steps.review.outcome != 'success'
+        run: |
+          echo "Gemini review failed!"
+          exit 1
diff --git a/.gitignore b/.gitignore
index 0fd3f5a..095d2d1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -129,3 +129,4 @@ dist
 .yarn/install-state.gz
 .pnp.*
 */**/*.mwb.bak
+.venv/
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
new file mode 100644
index 0000000..6b1c73c
--- /dev/null
+++ b/.pre-commit-config.yaml
@@ -0,0 +1,39 @@
+repos:
+  - repo: https://github.com/pre-commit/pre-commit-hooks
+    rev: v2.3.0
+    hooks:
+      - id: check-yaml
+      - id: end-of-file-fixer
+      - id: trailing-whitespace
+      - id: check-added-large-files
+      - id: check-json
+        exclude: ^tsconfig\.json$
+
+  - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook
+    rev: v9.11.0
+    hooks:
+      - id: commitlint
+        stages: [commit-msg]
+        additional_dependencies: ["@commitlint/config-conventional"]
+
+  - repo: local
+    hooks:
+      - id: prettier
+        name: Run prettier
+        entry: npm run format
+        language: node
+        files: \.(ts|tsx|json|yaml|md)$
+        types_or: [file]
+
+      - id: eslint
+        name: Run eslint
+        entry: npm run lint
+        language: node
+        files: \.(ts|tsx)$ # Use files instead of types
+        types_or: [file] # Indicate we're checking files
+
+      - id: jest
+        name: Run jest tests
+        entry: npm test
+        language: node
+        pass_filenames: false
diff --git a/.prettierignore b/.prettierignore
new file mode 100644
index 0000000..a4d64c3
--- /dev/null
+++ b/.prettierignore
@@ -0,0 +1,5 @@
+package.json
+package-lock.json
+dist/
+node_modules/
+.github/
diff --git a/.prettierrc b/.prettierrc
index 9e26dfe..0967ef4 100644
--- a/.prettierrc
+++ b/.prettierrc
@@ -1 +1 @@
-{}
\ No newline at end of file
+{}
diff --git a/README.md b/README.md
index 5032bdb..2fc23a5 100644
--- a/README.md
+++ b/README.md
@@ -1 +1 @@
-# funston-backend
\ No newline at end of file
+# funston-backend
diff --git a/commitlint.config.js b/commitlint.config.js
new file mode 100644
index 0000000..69b4242
--- /dev/null
+++ b/commitlint.config.js
@@ -0,0 +1,3 @@
+module.exports = {
+  extends: ["@commitlint/config-conventional"],
+};
diff --git a/documentation/database-schema/db-schema.sql b/documentation/database-schema/db-schema.sql
index 6866487..ec8380e 100644
--- a/documentation/database-schema/db-schema.sql
+++ b/documentation/database-schema/db-schema.sql
@@ -2467,17 +2467,17 @@ SHOW WARNINGS;
 DELIMITER $$
 USE `tutortrove_main`$$
 CREATE DEFINER=`root`@`%` PROCEDURE `CloneFranchise`(
-	IN sample_franchise_id INT(11),
+	IN sample_franchise_id INT(11),
     IN franchise_name varchar(255))
 main_proc:BEGIN
-
+
 #set @sample_franchise_id=436;
 #set @@new_franchise_id=451;
 DECLARE sourceId int;
 #DECLARE sampleId int;
 DECLARE unknown_column CONDITION FOR 1091;

-DECLARE EXIT HANDLER FOR NOT FOUND BEGIN
+DECLARE EXIT HANDLER FOR NOT FOUND BEGIN
 	SIGNAL SQLSTATE '45001'
       SET MESSAGE_TEXT = 'The franchise to clone does not exists';
 END;
@@ -2506,7 +2506,7 @@ if sourceId is null then
 end if;

 drop table if exists tmp;
-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT `name`, `title`, `logo_src`, `skin_id`, `logo_width`, `logo_height`, `contact_email`, `API_key`, `app_secret`, `facebook_url`, `favicon`, `force_move`, `header_bg_color`, `header_bottom_padding`, `facebook_enabled`, `subdomain`, `host`, `from_email`, `bcc_email`, `default_timezone`, `service_level`, `currency`, `results_per_page`, `order_users_by`, `locations_enabled`, `pricing_enabled`, `billpay_enabled`, `quickbooks_enabled`, `force_https`, `custom_fields_enabled`, `balance`, `html_mail_header`, `html_mail_footer`, `private_key`, `callback_url`, `order_tutors_by`, `normal_mail_footer`, `key_id`, `is_active`, `messaging_enabled`, `use_host`, `hide_tt_branding`, `home_website`, `show_export_button`, `show_wb_audio`, `show_wb_video`, `show_download_button`, `franchise_webroot`, `show_print_button`, `default_timesheet_view`, `tutor_dashboard_events`, `asset_franchise_parent_id`, `sso_enabled`, `is_developer`, `whiteboard_left_offset`, `fixed_width_whiteboard`, `olark_enabled`, `custom_help_page`, `apple_homescreen_icon`, `email_reviews`, `locale`
 from franchises f
 WHERE f.id=sample_franchise_id;
@@ -2580,7 +2580,7 @@ drop table tutortrove_main.tmp;
 set @new_franchise_id = LAST_INSERT_ID();


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.QB_TRNS where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2631,7 +2631,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.QB_lines where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2647,7 +2647,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.addresses where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2673,7 +2673,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.api_keys where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2688,7 +2688,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.change_tracking where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2709,7 +2709,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.chat_uses where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2728,7 +2728,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.chats where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2752,7 +2752,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.client_accounts where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp change id tmp_id int after imported;
@@ -2784,15 +2784,15 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.client_balances where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
-update tmp
+update tmp
 set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 tutortrove_main.tmp.client_account_id=(
-	select id
-    from tutortrove_main.client_accounts
+	select id
+    from tutortrove_main.client_accounts
     where tutortrove_main.client_accounts.tmp_id = tutortrove_main.tmp.client_account_id
 );
 ## INSERTIN THE MODIFIED DATA INTO THE DESTINATION TABLE
@@ -2822,7 +2822,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.custom_exports where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2838,7 +2838,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.custom_fields where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2870,7 +2870,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.emails where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2892,7 +2892,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.franchise_email_settings where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2913,7 +2913,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.franchise_layouts where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2927,7 +2927,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.franchise_pages where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2949,7 +2949,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.franchise_payment_settings where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2973,7 +2973,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.franchise_permissions where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -2995,7 +2995,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.handouts where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3014,7 +3014,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.locations where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3034,7 +3034,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.mcgraw_files where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3051,7 +3051,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.memorized_rates where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3073,7 +3073,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.messages where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3096,7 +3096,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.packages where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3125,7 +3125,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.pages where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3140,7 +3140,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.pay_brackets where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3155,7 +3155,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.pay_rates where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3176,7 +3176,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.payment_overrides where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3197,7 +3197,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.payments where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3228,7 +3228,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.phones where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3248,7 +3248,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.price_brackets where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3263,7 +3263,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.prices where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3283,7 +3283,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-/*CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+/*CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.QB_TRNS where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 update tmp set tutortrove_main.tmp.franchise_id= @new_franchise_id where tutortrove_main.tmp.franchise_id > 0;
@@ -3292,7 +3292,7 @@ insert into tutortrove_main.QB_TRNS select * from tmp;
 drop table tutortrove_main.tmp;*/


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.profile_images where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3314,7 +3314,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.resource_libraries where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3330,7 +3330,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.resources where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3349,7 +3349,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.review_templates where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3363,7 +3363,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.services where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3385,7 +3385,7 @@ drop table tutortrove_main.tmp;



-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.subject_types where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3402,7 +3402,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.subjects where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3416,7 +3416,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.tutors where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3452,7 +3452,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.user_change_tracking where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3471,7 +3471,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.user_notes where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
@@ -3501,16 +3501,16 @@ drop table tutortrove_main.tmp;



-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.users where franchise_id = sample_franchise_id;

 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp change id tmp_id int after imported;
-update tmp
-set tutortrove_main.tmp.franchise_id= @new_franchise_id,
+update tmp
+set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 tutortrove_main.tmp.client_account_id=(
-	select id
-    from tutortrove_main.client_accounts
+	select id
+    from tutortrove_main.client_accounts
     where tutortrove_main.client_accounts.tmp_id = tutortrove_main.tmp.client_account_id
 );
 ## INSERTIN THE MODIFIED DATA INTO THE DESTINATION TABLE
@@ -3573,15 +3573,15 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.credit_cards where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
-update tmp
+update tmp
 set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 tutortrove_main.tmp.user_id=(
-	select id
-    from tutortrove_main.users
+	select id
+    from tutortrove_main.users
     where tutortrove_main.users.tmp_id=tutortrove_main.tmp.user_id
 );
 ## INSERTIN THE MODIFIED DATA INTO THE DESTINATION TABLE
@@ -3609,15 +3609,15 @@ drop table tutortrove_main.tmp;



-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.sessions where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp change id tmp_sess_id int after `matching_code`;
 update tmp
 set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 tutortrove_main.tmp.student_id=(
-	select id
-    from tutortrove_main.users
+	select id
+    from tutortrove_main.users
     where tutortrove_main.users.tmp_id=tutortrove_main.tmp.student_id
     and tutortrove_main.users.franchise_id=@new_franchise_id
 );
@@ -3698,11 +3698,11 @@ drop table tutortrove_main.tmp;


 ####SESSION_ATTACHMENTS
-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.session_attachments where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp change id tmp_sess_att_id int after `full_request_url`;
-update tmp
+update tmp
 set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 `tmp`.`user_id`=(
 select id from users
@@ -3713,7 +3713,7 @@ select id from sessions
 where sessions.tmp_sess_id = tmp.session_id
 ),
 `tmp`.`session_use_id`=(
-select id
+select id
 from session_uses
 where session_uses.tmp_use_id = tmp.session_use_id
 );
@@ -3762,8 +3762,8 @@ drop table tutortrove_main.tmp;


 ####SESSION_SUMMARIES
-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
-SELECT * FROM tutortrove_main.session_summaries where
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+SELECT * FROM tutortrove_main.session_summaries where
 session_summaries.session_id in (
 select id
 from sessions
@@ -3772,7 +3772,7 @@ sessions.franchise_id = @new_franchise_id
 );
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
-update tmp
+update tmp
 set tutortrove_main.tmp.session_id=(
 select id from sessions
 where sessions.tmp_sess_id = tmp.session_id
@@ -3802,18 +3802,18 @@ drop table tutortrove_main.tmp;



-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
-SELECT * FROM tutortrove_main.sessions_users
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+SELECT * FROM tutortrove_main.sessions_users
 where `sessions_users`.`franchise_id` = sample_franchise_id
 or sessions_users.user_id in (select tmp_id from users where users.franchise_id=@new_franchise_id);
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
-update tmp
-set tutortrove_main.tmp.franchise_id=(
+update tmp
+set tutortrove_main.tmp.franchise_id=(
 	case
 		when tmp.franchise_id is null then null
         else @new_franchise_id
-	end
+	end
 ),
 tmp.session_id = (
 	select id from sessions
@@ -3841,7 +3841,7 @@ select * from tmp;
 drop table tutortrove_main.tmp;


-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.session_uses where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp change id tmp_use_id int after wb_loads;
@@ -3876,13 +3876,13 @@ drop table tutortrove_main.tmp;



-CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
+CREATE TEMPORARY TABLE tutortrove_main.tmp ENGINE=Myisam
 SELECT * FROM tutortrove_main.session_images where franchise_id = sample_franchise_id;
 ##UPDATE THE ID WITH THE DESIRED ONE
 alter table tmp drop column id;
 update tmp set tutortrove_main.tmp.franchise_id= @new_franchise_id,
 tmp.session_use_id = (
-	select id
+	select id
 	from session_uses
 	where session_uses.tmp_use_id = tmp.session_use_id
 ),
@@ -3950,7 +3950,7 @@ CREATE DEFINER=`root`@`%` FUNCTION `calculate_pay`(franchise_id int, session_id
 BEGIN
 #case 0: no tutor
 set @hasStudent := 0;
-set @isBillable := 0;
+set @isBillable := 0;
 set @serviceId := 0;
 select st.has_student, st.is_billable, s.service_id into @hasStudent, @isBillable, @serviceId
 from sessions s
@@ -3968,14 +3968,14 @@ set @attendanceStatus := "";
 #no charges if the session has been cancelled on time
 select su.`attendance_status` into @attendanceStatus
 from sessions_users su
-where su.session_id=session_id
+where su.session_id=session_id
 and su.user_id=student_id
 limit 1;
 if (@attendanceStatus = "on_time_cancellation")or(@attendanceStatus = "") then
 	return 0;
 end if;

-select su.fixed_rate, su.hourly_rate into @fixedRate, @perHour
+select su.fixed_rate, su.hourly_rate into @fixedRate, @perHour
 from sessions_users su
 where su.id=session_user_id and su.session_id = session_id;

@@ -3989,7 +3989,7 @@ set @fixedRate = 0;
 set @perHour = 0;
 select distinct mr.fixed, mr.hourly into @fixedRate, @perHour
 from memorized_rates mr
-where
+where
 mr.franchise_id = franchise_id
 and mr.type = 'pay'
 and mr.service_id = @serviceId
@@ -4018,7 +4018,7 @@ CREATE DEFINER=`root`@`%` FUNCTION `calculate_price`(franchise_id int, session_i
 BEGIN
 #case 0: no tutor
 set @hasTutor := 0;
-set @isBillable := 0;
+set @isBillable := 0;
 set @serviceId := 0;
 select st.has_tutor, st.is_billable, s.service_id into @hasTutor, @isBillable, @serviceId
 from sessions s
@@ -4036,7 +4036,7 @@ set @attendanceStatus := "";
 #no charges if the session has been cancelled on time
 select su.`attendance_status` into @attendanceStatus
 from sessions_users su
-where su.session_id=session_id
+where su.session_id=session_id
 and su.user_id=student_id
 limit 1;
 if (@attendanceStatus = "on_time_cancellation")or(@attendanceStatus = "") then
@@ -4045,7 +4045,7 @@ end if;

 select su.fixed_rate, su.hourly_rate into @fixedRate, @perHour
 from sessions_users su
-where su.session_id=session_id
+where su.session_id=session_id
 and su.user_id=tutor_id
 limit 1;

@@ -4058,7 +4058,7 @@ set @fixedRate = 0;
 set @perHour = 0;
 select distinct mr.fixed, mr.hourly into @fixedRate, @perHour
 from memorized_rates mr
-where
+where
 mr.franchise_id = franchise_id
 and mr.type = 'pay'
 and mr.service_id = @serviceId
@@ -4090,19 +4090,19 @@ BEGIN
 #FROM_UNIXTIME(p_time),FROM_UNIXTIME(s2.time)

 select s2.id as session_id, s2.time, s2.duration, s2.repeat_type, s2.repeat_until, s2.repeat_interval, s2.status
-from
+from
 sessions_users su2
 join sessions s2 on s2.id=su2.session_id
 where
 s2.id != this_session
 and
-s2.franchise_id=p_franchise_id
+s2.franchise_id=p_franchise_id
 and su2.user_id=p_user_id

 and s2.time >= p_since
 and s2.status not like "finalized" AND s2.status not like "deleted" AND s2.status not like "broken"

-and
+and

 (#CHECK FOR CONFLICTS
 	#EXACT MATCH SESSIONS (sessions starting or finishing in between of another
@@ -4111,23 +4111,23 @@ and
 or
 	#RULES FOR REPEATING SESSIONS
 	(
-
+
 		(#forever or until
 			#sessions repeating forever
             p_repeat_type like "forever" or s2.repeat_type like "forever"
-
+
 			#session to schedule is repeating until a certain time
 			or (p_repeat_type like "until" )
 			#session in the database is repeating until certain time
 			or (s2.repeat_type like "until" and s2.repeat_until>=p_time)
         )#end forever or until
-
+
 		and
 		((#WEEKLY SESSIONS
 			(
 				#only session in database is weekly
 				(
-					s2.repeat_interval like "weekly"
+					s2.repeat_interval like "weekly"
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
@@ -4159,27 +4159,27 @@ or
 				)
 			)
 		) #end WEEKLY
-
+
         OR
-
+
         (#BIWEEKLY SESSIONS
 			(
 				#only session in database is weekly or biweekly
 				(
-					(s2.repeat_interval like "biweekly" )
+					(s2.repeat_interval like "biweekly" )
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
 				OR
 				#only session to schedule is weekly or biweekly
-				(p_repeat_interval like "biweekly"
+				(p_repeat_interval like "biweekly"
                 and p_time <= s2.time
                 and s2.repeat_type like "no_repeat"
                 )
                 OR
                 #both are scheduled weekly
                 (
-					p_repeat_interval like "biweekly"
+					p_repeat_interval like "biweekly"
                     and s2.repeat_interval like "biweekly"
                     and (p_repeat_type not like "no_repeat" and s2.repeat_type not like "no_repeat")
 				)
@@ -4201,34 +4201,34 @@ or
 				)
 			)
 		) #end BIWEEKLY SESSIONS
-
+
         OR
         (#DAILY SESSIONS
-
+
             (
 				#only session in database is daily
 				(
-					(s2.repeat_interval like "daily" )
+					(s2.repeat_interval like "daily" )
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
 				OR
 				#only session to schedule is daily
-				(p_repeat_interval like "daily"
+				(p_repeat_interval like "daily"
                 and p_time <= s2.time
                 and s2.repeat_type like "no_repeat"
                 )
                 OR
                 #both are scheduled daily
                 (
-					p_repeat_interval like "daily"
+					p_repeat_interval like "daily"
                     and s2.repeat_interval like "daily"
                     and (p_repeat_type not like "no_repeat" and s2.repeat_type not like "no_repeat")
 				)
 			)
-
-
-
+
+
+
             AND
             (
 				#session to schedule starts in between a session in database
@@ -4236,7 +4236,7 @@ or
                 OR
                 #session to schedule finishes in between a session in database
                 DATE_FORMAT(convert_tz(FROM_UNIXTIME(s2.time),'UTC',p_timezone), '%H:%i:%s') between DATE_FORMAT(convert_tz(FROM_UNIXTIME(p_time),'UTC',p_timezone), '%H:%i:%s') and DATE_FORMAT(convert_tz(FROM_UNIXTIME(p_time+p_duration-1),'UTC',p_timezone), '%H:%i:%s')
-            )
+            )
         ))#END OF DAILY SESSIONS
 	) #end rules for repeating sessions
 ) order by s2.time asc; #END OF CHECK FOR CONFLICTS
@@ -4263,19 +4263,19 @@ select s2.id, s2.title, s2.time, DATE_FORMAT(convert_tz(FROM_UNIXTIME(s2.time),'
 convert_tz(FROM_UNIXTIME(p_time),'UTC',p_timezone) as param_time, convert_tz(FROM_UNIXTIME(p_repeat_until),'UTC',p_timezone) as param_until, convert_tz(FROM_UNIXTIME(s2.repeat_until),'UTC',p_timezone) as until

 #select s2.id as session_id, s2.time, s2.duration, s2.repeat_type, s2.repeat_until, s2.repeat_interval, s2.status
-from
+from
 sessions_users su2
 join sessions s2 on s2.id=su2.session_id
 where
 s2.id != this_session
 and
-s2.franchise_id=p_franchise_id
+s2.franchise_id=p_franchise_id
 and su2.user_id=p_user_id

 and s2.time >= p_since
 and s2.status not like "finalized" AND s2.status not like "deleted" AND s2.status not like "broken"

-and
+and

 (#CHECK FOR CONFLICTS
 	#EXACT MATCH SESSIONS (sessions starting or finishing in between of another
@@ -4284,23 +4284,23 @@ and
 or
 	#RULES FOR REPEATING SESSIONS
 	(
-
+
 		(#forever or until
 			#sessions repeating forever
             (p_repeat_type like "forever" or s2.repeat_type like "forever")
-
+
 			#session to schedule is repeating until a certain time
 			or (p_repeat_type like "until" and p_repeat_until>=s2.time)
 			#session in the database is repeating until certain time
 			#or (s2.repeat_type like "until" and s2.repeat_until>=p_time)
         )#end forever or until
-
+
 		and
 		((#WEEKLY SESSIONS
 			(
 				#only session in database is weekly
 				(
-					s2.repeat_interval like "weekly"
+					s2.repeat_interval like "weekly"
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
@@ -4332,27 +4332,27 @@ or
 				)
 			)
 		) #end WEEKLY
-
+
         OR
-
+
         (#BIWEEKLY SESSIONS
 			(
 				#only session in database is weekly or biweekly
 				(
-					(s2.repeat_interval like "biweekly" )
+					(s2.repeat_interval like "biweekly" )
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
 				OR
 				#only session to schedule is weekly or biweekly
-				(p_repeat_interval like "biweekly"
+				(p_repeat_interval like "biweekly"
                 and p_time <= s2.time
                 and s2.repeat_type like "no_repeat"
                 )
                 OR
                 #both are scheduled weekly
                 (
-					p_repeat_interval like "biweekly"
+					p_repeat_interval like "biweekly"
                     and s2.repeat_interval like "biweekly"
                     and (p_repeat_type not like "no_repeat" and s2.repeat_type not like "no_repeat")
 				)
@@ -4374,34 +4374,34 @@ or
 				)
 			)
 		) #end BIWEEKLY SESSIONS
-
+
         OR
         (#DAILY SESSIONS
-
+
             (
 				#only session in database is daily
 				(
-					(s2.repeat_interval like "daily" )
+					(s2.repeat_interval like "daily" )
                     and s2.time <= p_time
                     and p_repeat_type like "no_repeat"
 				)
 				OR
 				#only session to schedule is daily
-				(p_repeat_interval like "daily"
+				(p_repeat_interval like "daily"
                 and p_time <= s2.time
                 and s2.repeat_type like "no_repeat"
                 )
                 OR
                 #both are scheduled daily
                 (
-					p_repeat_interval like "daily"
+					p_repeat_interval like "daily"
                     and s2.repeat_interval like "daily"
                     and (p_repeat_type not like "no_repeat" and s2.repeat_type not like "no_repeat")
 				)
 			)
-
-
-
+
+
+
             AND
             (
 				#session to schedule starts in between a session in database
@@ -4409,7 +4409,7 @@ or
                 OR
                 #session to schedule finishes in between a session in database
                 DATE_FORMAT(convert_tz(FROM_UNIXTIME(s2.time),'UTC',p_timezone), '%H:%i:%s') between DATE_FORMAT(convert_tz(FROM_UNIXTIME(p_time),'UTC',p_timezone), '%H:%i:%s') and DATE_FORMAT(convert_tz(FROM_UNIXTIME(p_time+p_duration-1),'UTC',p_timezone), '%H:%i:%s')
-            )
+            )
         ))#END OF DAILY SESSIONS
 	) #end rules for repeating sessions
 ) order by s2.time asc; #END OF CHECK FOR CONFLICTS
@@ -4442,10 +4442,10 @@ BEGIN
 	s.time >= since and
 	s.franchise_id=franchise_id and
 	s.status not like "finalized" AND s.status not like "deleted" AND s.status not like "broken") ;
-
+
 	DROP TEMPORARY TABLE if exists trimmed_sessions2;
 	CREATE TEMPORARY TABLE trimmed_sessions2 engine=memory AS
-	(select id, time, duration, status, repeat_type, repeat_interval, repeat_until, franchise_id
+	(select id, time, duration, status, repeat_type, repeat_interval, repeat_until, franchise_id
 	from sessions s
 	where
 	s.time >= since and
@@ -4455,8 +4455,8 @@ BEGIN

 	select su.user_id, su.session_id,
 		s1.status, s1.repeat_type, s1.repeat_until, s1.repeat_interval,s1.duration, s1.time,
-		s2.time,  s2.duration, s2.repeat_interval, s2.repeat_until, s2.repeat_type, s2.status, su2.session_id
-	from
+		s2.time,  s2.duration, s2.repeat_interval, s2.repeat_until, s2.repeat_type, s2.status, su2.session_id
+	from
 	trimmed_sessions1 s1
 	join sessions_users su on s1.id=su.session_id
 	join sessions_users su2 on su2.user_id=su.user_id and su2.session_id != su.session_id
@@ -4465,7 +4465,7 @@ BEGIN
 	s1.time <= s2.time
 	#RULES FOR ALL SESSIONS TO DETECT EXACT MATCH
 	#S2 STARTS IN BETWEEN S1 (decremented in 1 second the ending time to prevent false-positives)
-	AND
+	AND
 	(
 		#S1 ENDS IN BETWEEN S2 (decremented in 1 second the ending time to prevent false-positives)
 		(s1.time+s1.duration-1 between s2.time and s2.time+s2.duration-1)
@@ -4476,7 +4476,7 @@ BEGIN
 				(s1.repeat_type like "forever" or (s1.repeat_type="until" and s1.repeat_until>=s2.time))
 				and s1.repeat_interval like "weekly" or s1.repeat_interval like "biweekly"
 			)
-
+
 			and
 			(DAYOFWEEK(DATE_FORMAT(FROM_UNIXTIME(s1.time), '%e %b %Y %H:%i'))=DAYOFWEEK(DATE_FORMAT(FROM_UNIXTIME(s2.time), '%e %b %Y %H:%i')))
 			and
@@ -4524,10 +4524,10 @@ BEGIN
 	s.time >= since and
 	s.franchise_id=franchise_id and
 	s.status not like "finalized" AND s.status not like "deleted" AND s.status not like "broken") ;
-
+
 	DROP TEMPORARY TABLE if exists trimmed_sessions2;
 	CREATE TEMPORARY TABLE trimmed_sessions2 engine=memory AS
-	(select id, time, duration, status, repeat_type, repeat_interval, repeat_until, franchise_id
+	(select id, time, duration, status, repeat_type, repeat_interval, repeat_until, franchise_id
 	from sessions s
 	where
 	s.time >= since and
@@ -4537,8 +4537,8 @@ BEGIN

 	select su.user_id, su.session_id,
 		s1.status, s1.repeat_type, s1.repeat_until, s1.repeat_interval,s1.duration, s1.time,
-		s2.time,  s2.duration, s2.repeat_interval, s2.repeat_until, s2.repeat_type, s2.status, su2.session_id
-	from
+		s2.time,  s2.duration, s2.repeat_interval, s2.repeat_until, s2.repeat_type, s2.status, su2.session_id
+	from
 	trimmed_sessions1 s1
 	join sessions_users su on s1.id=su.session_id
 	join sessions_users su2 on su2.user_id=su.user_id and su2.session_id != su.session_id
@@ -4548,7 +4548,7 @@ BEGIN
     and (su.user_id=user_id or su2.user_id=user_id)
 	#RULES FOR ALL SESSIONS TO DETECT EXACT MATCH
 	#S2 STARTS IN BETWEEN S1 (decremented in 1 second the ending time to prevent false-positives)
-	AND
+	AND
 	(
 		#S1 ENDS IN BETWEEN S2 (decremented in 1 second the ending time to prevent false-positives)
 		(s1.time+s1.duration-1 between s2.time and s2.time+s2.duration-1)
@@ -4559,7 +4559,7 @@ BEGIN
 				(s1.repeat_type like "forever" or (s1.repeat_type="until" and s1.repeat_until>=s2.time))
 				and s1.repeat_interval like "weekly" or s1.repeat_interval like "biweekly"
 			)
-
+
 			and
 			(DAYOFWEEK(CONVERT_TZ(FROM_UNIXTIME(s1.time),'UTC',timezone))=DAYOFWEEK(convert_tz(FROM_UNIXTIME(s2.time),'UTC',timezone)))
 			and
diff --git a/documentation/swagger/routes/auth.yaml b/documentation/swagger/routes/auth.yaml
new file mode 100644
index 0000000..35767dd
--- /dev/null
+++ b/documentation/swagger/routes/auth.yaml
@@ -0,0 +1,35 @@
+paths:
+  /api/auth/login:
+    post:
+      tags:
+        - Auth
+      summary: Authenticate user and get token
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: "#/components/schemas/LoginInput"
+      responses:
+        200:
+          description: Login successful
+          content:
+            application/json:
+              schema:
+                type: object
+                properties:
+                  token:
+                    type: string
+                    description: JWT token
+        401:
+          description: Invalid credentials
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
+        400:
+          description: Validation error
+          content:
+            application/json:
+              schema:
+                $ref: "#/components/schemas/Error"
diff --git a/documentation/swagger/schemas/auth.yaml b/documentation/swagger/schemas/auth.yaml
new file mode 100644
index 0000000..2c220a4
--- /dev/null
+++ b/documentation/swagger/schemas/auth.yaml
@@ -0,0 +1,25 @@
+components:
+  schemas:
+    LoginInput:
+      type: object
+      required:
+        - email
+        - password
+      properties:
+        email:
+          type: string
+          format: email
+          description: User email address
+        password:
+          type: string
+          description: User password
+
+    Error:
+      type: object
+      properties:
+        status:
+          type: string
+          example: error
+        message:
+          type: string
+          example: Error message
diff --git a/documentation/swagger/schemas/franchise.yaml b/documentation/swagger/schemas/franchise.yaml
new file mode 100644
index 0000000..3ec8fda
--- /dev/null
+++ b/documentation/swagger/schemas/franchise.yaml
@@ -0,0 +1,26 @@
+components:
+  schemas:
+    Franchise:
+      type: object
+      properties:
+        id:
+          type: integer
+          format: int64
+          description: Unique identifier for the franchise
+        name:
+          type: string
+          description: Franchise name used in tutortrove subdomain
+        host:
+          type: string
+          description: Custom domain for the franchise
+
+    FranchiseError:
+      type: object
+      properties:
+        status:
+          type: string
+          enum: [error]
+          example: error
+        message:
+          type: string
+          example: No franchise found for the given referer
diff --git a/documentation/swagger/security/auth.yaml b/documentation/swagger/security/auth.yaml
new file mode 100644
index 0000000..c8f2ddd
--- /dev/null
+++ b/documentation/swagger/security/auth.yaml
@@ -0,0 +1,6 @@
+components:
+  securitySchemes:
+    BearerAuth:
+      type: http
+      scheme: bearer
+      bearerFormat: JWT
diff --git a/documentation/swagger/security/headers.yaml b/documentation/swagger/security/headers.yaml
new file mode 100644
index 0000000..76a9d88
--- /dev/null
+++ b/documentation/swagger/security/headers.yaml
@@ -0,0 +1,7 @@
+components:
+  securitySchemes:
+    RefererHeader:
+      type: apiKey
+      in: header
+      name: referer
+      description: Domain of the franchise (e.g., franchise-name.tutortrove.com or custom-domain.com)
diff --git a/eslint.config.mjs b/eslint.config.mjs
new file mode 100644
index 0000000..33f09f4
--- /dev/null
+++ b/eslint.config.mjs
@@ -0,0 +1,22 @@
+import globals from "globals";
+import pluginJs from "@eslint/js";
+import tseslint from "typescript-eslint";
+
+/** @type {import('eslint').Linter.Config[]} */
+export default [
+  {
+    files: ["**/*.{js,mjs,cjs,ts}"],
+    rules: {
+      "@typescript-eslint/no-unused-vars": [
+        "error",
+        { "argsIgnorePattern": "^_" }
+      ]
+    }
+  },
+  { languageOptions: { globals: globals.node } },
+  pluginJs.configs.recommended,
+  ...tseslint.configs.recommended,
+  {
+    ignores: ["dist/**", "documentation/**/*", "node_modules/**/*"],
+  },
+];
diff --git a/jest.config.ts b/jest.config.ts
new file mode 100644
index 0000000..84ab814
--- /dev/null
+++ b/jest.config.ts
@@ -0,0 +1,29 @@
+import type { Config } from "@jest/types";
+
+const config: Config.InitialOptions = {
+  preset: "ts-jest",
+  testEnvironment: "node",
+  setupFilesAfterEnv: ["<rootDir>/tests/config/setup.ts"],
+  moduleNameMapper: {
+    "^@/(.*)$": "<rootDir>/src/$1",
+  },
+  transform: {
+    "^.+\\.(ts|tsx)$": "ts-jest", // Only transform TypeScript files
+  },
+  testMatch: ["**/*.test.ts"],
+  verbose: false,
+  clearMocks: true,
+  resetMocks: true,
+  restoreMocks: true,
+  coverageReporters: ["json", "html"],
+  coverageThreshold: {
+    global: {
+      lines: 70,
+    },
+  },
+
+  testTimeout: 5000,
+  collectCoverage: process.env.CI ? true : false, // Only collect coverage in CI environments
+};
+
+export default config;
diff --git a/package-lock.json b/package-lock.json
index 18513c4..3d3e7f8 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -10,16 +10,23 @@
       "license": "ISC",
       "dependencies": {
         "@prisma/client": "^6.1.0",
+        "@types/swagger-jsdoc": "^6.0.4",
+        "@types/swagger-ui-express": "^4.1.7",
         "bcrypt": "^5.1.1",
         "cors": "^2.8.5",
         "express": "^4.21.2",
         "express-rate-limit": "^7.5.0",
         "helmet": "^8.0.0",
         "jsonwebtoken": "^9.0.2",
+        "swagger-jsdoc": "^6.2.8",
+        "swagger-ui-express": "^5.0.1",
         "winston": "^3.17.0",
         "zod": "^3.24.1"
       },
       "devDependencies": {
+        "@commitlint/cli": "^19.6.1",
+        "@commitlint/config-conventional": "^19.6.0",
+        "@eslint/js": "^9.17.0",
         "@types/bcrypt": "^5.0.2",
         "@types/cors": "^2.8.17",
         "@types/express": "^5.0.0",
@@ -31,15 +38,20 @@
         "eslint": "^9.17.0",
         "eslint-config-prettier": "^9.1.0",
         "eslint-plugin-prettier": "^5.2.1",
+        "globals": "^15.14.0",
+        "husky": "^9.1.7",
         "jest": "^29.7.0",
         "jest-mock-extended": "^4.0.0-beta1",
+        "lint-staged": "^15.2.11",
         "prettier": "^3.4.2",
         "prisma": "^6.1.0",
         "supertest": "^7.0.0",
+        "swagger-cli": "^4.0.4",
         "ts-jest": "^29.2.5",
         "ts-node": "^10.9.2",
         "ts-node-dev": "^2.0.0",
-        "typescript": "^5.7.2"
+        "typescript": "^5.7.2",
+        "typescript-eslint": "^8.18.1"
       }
     },
     "node_modules/@ampproject/remapping": {
@@ -55,6 +67,205 @@
         "node": ">=6.0.0"
       }
     },
+    "node_modules/@apidevtools/json-schema-ref-parser": {
+      "version": "9.1.2",
+      "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
+      "integrity": "sha512-r1w81DpR+KyRWd3f+rk6TNqMgedmAxZP5v5KWlXQWlgMUUtyEJch0DKEci1SorPMiSeM8XPl7MZ3miJ60JIpQg==",
+      "dependencies": {
+        "@jsdevtools/ono": "^7.1.3",
+        "@types/json-schema": "^7.0.6",
+        "call-me-maybe": "^1.0.1",
+        "js-yaml": "^4.1.0"
+      }
+    },
+    "node_modules/@apidevtools/openapi-schemas": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@apidevtools/openapi-schemas/-/openapi-schemas-2.1.0.tgz",
+      "integrity": "sha512-Zc1AlqrJlX3SlpupFGpiLi2EbteyP7fXmUOGup6/DnkRgjP9bgMM/ag+n91rsv0U1Gpz0H3VILA/o3bW7Ua6BQ==",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-cli/-/swagger-cli-4.0.4.tgz",
+      "integrity": "sha512-hdDT3B6GLVovCsRZYDi3+wMcB1HfetTU20l2DC8zD3iFRNMC6QNAZG5fo/6PYeHWBEv7ri4MvnlKodhNB0nt7g==",
+      "deprecated": "This package has been abandoned. Please switch to using the actively maintained @redocly/cli",
+      "dev": true,
+      "dependencies": {
+        "@apidevtools/swagger-parser": "^10.0.1",
+        "chalk": "^4.1.0",
+        "js-yaml": "^3.14.0",
+        "yargs": "^15.4.1"
+      },
+      "bin": {
+        "swagger-cli": "bin/swagger-cli.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/cliui": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
+      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
+      "dev": true,
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^6.2.0"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "dev": true,
+      "dependencies": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "dev": true,
+      "dependencies": {
+        "p-locate": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/p-limit": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
+      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+      "dev": true,
+      "dependencies": {
+        "p-try": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "dev": true,
+      "dependencies": {
+        "p-limit": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/y18n": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
+      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
+      "dev": true
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/yargs": {
+      "version": "15.4.1",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
+      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
+      "dev": true,
+      "dependencies": {
+        "cliui": "^6.0.0",
+        "decamelize": "^1.2.0",
+        "find-up": "^4.1.0",
+        "get-caller-file": "^2.0.1",
+        "require-directory": "^2.1.1",
+        "require-main-filename": "^2.0.0",
+        "set-blocking": "^2.0.0",
+        "string-width": "^4.2.0",
+        "which-module": "^2.0.0",
+        "y18n": "^4.0.0",
+        "yargs-parser": "^18.1.2"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@apidevtools/swagger-cli/node_modules/yargs-parser": {
+      "version": "18.1.3",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
+      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
+      "dev": true,
+      "dependencies": {
+        "camelcase": "^5.0.0",
+        "decamelize": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/@apidevtools/swagger-methods": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-methods/-/swagger-methods-3.0.2.tgz",
+      "integrity": "sha512-QAkD5kK2b1WfjDS/UQn/qQkbwF31uqRjPTrsCs5ZG9BQGAkjwvqGFjjPqAuzac/IYzpPtRzjCP1WrTuAIjMrXg=="
+    },
+    "node_modules/@apidevtools/swagger-parser": {
+      "version": "10.0.3",
+      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-parser/-/swagger-parser-10.0.3.tgz",
+      "integrity": "sha512-sNiLY51vZOmSPFZA5TF35KZ2HbgYklQnTSDnkghamzLb3EkNtcQnrBQEj5AOCxHpTtXpqMCRM1CrmV2rG6nw4g==",
+      "dependencies": {
+        "@apidevtools/json-schema-ref-parser": "^9.0.6",
+        "@apidevtools/openapi-schemas": "^2.0.4",
+        "@apidevtools/swagger-methods": "^3.0.2",
+        "@jsdevtools/ono": "^7.1.3",
+        "call-me-maybe": "^1.0.1",
+        "z-schema": "^5.0.1"
+      },
+      "peerDependencies": {
+        "openapi-types": ">=7"
+      }
+    },
     "node_modules/@babel/code-frame": {
       "version": "7.26.2",
       "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
@@ -524,654 +735,1073 @@
         "node": ">=0.1.90"
       }
     },
-    "node_modules/@cspotcode/source-map-support": {
-      "version": "0.8.1",
-      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
-      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
+    "node_modules/@commitlint/cli": {
+      "version": "19.6.1",
+      "resolved": "https://registry.npmjs.org/@commitlint/cli/-/cli-19.6.1.tgz",
+      "integrity": "sha512-8hcyA6ZoHwWXC76BoC8qVOSr8xHy00LZhZpauiD0iO0VYbVhMnED0da85lTfIULxl7Lj4c6vZgF0Wu/ed1+jlQ==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/trace-mapping": "0.3.9"
+        "@commitlint/format": "^19.5.0",
+        "@commitlint/lint": "^19.6.0",
+        "@commitlint/load": "^19.6.1",
+        "@commitlint/read": "^19.5.0",
+        "@commitlint/types": "^19.5.0",
+        "tinyexec": "^0.3.0",
+        "yargs": "^17.0.0"
+      },
+      "bin": {
+        "commitlint": "cli.js"
       },
       "engines": {
-        "node": ">=12"
+        "node": ">=v18"
       }
     },
-    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.9",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
-      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
+    "node_modules/@commitlint/config-conventional": {
+      "version": "19.6.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/config-conventional/-/config-conventional-19.6.0.tgz",
+      "integrity": "sha512-DJT40iMnTYtBtUfw9ApbsLZFke1zKh6llITVJ+x9mtpHD08gsNXaIRqHTmwTZL3dNX5+WoyK7pCN/5zswvkBCQ==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/resolve-uri": "^3.0.3",
-        "@jridgewell/sourcemap-codec": "^1.4.10"
+        "@commitlint/types": "^19.5.0",
+        "conventional-changelog-conventionalcommits": "^7.0.2"
+      },
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@dabh/diagnostics": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
-      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
+    "node_modules/@commitlint/config-validator": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/config-validator/-/config-validator-19.5.0.tgz",
+      "integrity": "sha512-CHtj92H5rdhKt17RmgALhfQt95VayrUo2tSqY9g2w+laAXyk7K/Ef6uPm9tn5qSIwSmrLjKaXK9eiNuxmQrDBw==",
+      "dev": true,
       "dependencies": {
-        "colorspace": "1.1.x",
-        "enabled": "2.0.x",
-        "kuler": "^2.0.0"
+        "@commitlint/types": "^19.5.0",
+        "ajv": "^8.11.0"
+      },
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint-community/eslint-utils": {
-      "version": "4.4.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.1.tgz",
-      "integrity": "sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==",
+    "node_modules/@commitlint/config-validator/node_modules/ajv": {
+      "version": "8.17.1",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
+      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
       "dev": true,
       "dependencies": {
-        "eslint-visitor-keys": "^3.4.3"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+        "fast-deep-equal": "^3.1.3",
+        "fast-uri": "^3.0.1",
+        "json-schema-traverse": "^1.0.0",
+        "require-from-string": "^2.0.2"
       },
       "funding": {
-        "url": "https://opencollective.com/eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
       }
     },
-    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
-      "version": "3.4.3",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
-      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+    "node_modules/@commitlint/config-validator/node_modules/json-schema-traverse": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
+      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
+      "dev": true
+    },
+    "node_modules/@commitlint/ensure": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/ensure/-/ensure-19.5.0.tgz",
+      "integrity": "sha512-Kv0pYZeMrdg48bHFEU5KKcccRfKmISSm9MvgIgkpI6m+ohFTB55qZlBW6eYqh/XDfRuIO0x4zSmvBjmOwWTwkg==",
       "dev": true,
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      "dependencies": {
+        "@commitlint/types": "^19.5.0",
+        "lodash.camelcase": "^4.3.0",
+        "lodash.kebabcase": "^4.1.1",
+        "lodash.snakecase": "^4.1.1",
+        "lodash.startcase": "^4.4.0",
+        "lodash.upperfirst": "^4.3.1"
       },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint-community/regexpp": {
-      "version": "4.12.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
-      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+    "node_modules/@commitlint/execute-rule": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/execute-rule/-/execute-rule-19.5.0.tgz",
+      "integrity": "sha512-aqyGgytXhl2ejlk+/rfgtwpPexYyri4t8/n4ku6rRJoRhGZpLFMqrZ+YaubeGysCP6oz4mMA34YSTaSOKEeNrg==",
       "dev": true,
       "engines": {
-        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint/config-array": {
-      "version": "0.19.1",
-      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz",
-      "integrity": "sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==",
+    "node_modules/@commitlint/format": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/format/-/format-19.5.0.tgz",
+      "integrity": "sha512-yNy088miE52stCI3dhG/vvxFo9e4jFkU1Mj3xECfzp/bIS/JUay4491huAlVcffOoMK1cd296q0W92NlER6r3A==",
       "dev": true,
       "dependencies": {
-        "@eslint/object-schema": "^2.1.5",
-        "debug": "^4.3.1",
-        "minimatch": "^3.1.2"
+        "@commitlint/types": "^19.5.0",
+        "chalk": "^5.3.0"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint/core": {
-      "version": "0.9.1",
-      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.9.1.tgz",
-      "integrity": "sha512-GuUdqkyyzQI5RMIWkHhvTWLCyLo1jNK3vzkSyaExH5kHPDHcuL2VOpHjmMY+y3+NC69qAKToBqldTBgYeLSr9Q==",
+    "node_modules/@commitlint/format/node_modules/chalk": {
+      "version": "5.4.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.0.tgz",
+      "integrity": "sha512-ZkD35Mx92acjB2yNJgziGqT9oKHEOxjTBTDRpOsRWtdecL/0jM3z5kM/CTzHWvHIen1GvkM85p6TuFfDGfc8/Q==",
       "dev": true,
-      "dependencies": {
-        "@types/json-schema": "^7.0.15"
-      },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/@eslint/eslintrc": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz",
-      "integrity": "sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==",
+    "node_modules/@commitlint/is-ignored": {
+      "version": "19.6.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/is-ignored/-/is-ignored-19.6.0.tgz",
+      "integrity": "sha512-Ov6iBgxJQFR9koOupDPHvcHU9keFupDgtB3lObdEZDroiG4jj1rzky60fbQozFKVYRTUdrBGICHG0YVmRuAJmw==",
       "dev": true,
       "dependencies": {
-        "ajv": "^6.12.4",
-        "debug": "^4.3.2",
-        "espree": "^10.0.1",
-        "globals": "^14.0.0",
-        "ignore": "^5.2.0",
-        "import-fresh": "^3.2.1",
-        "js-yaml": "^4.1.0",
-        "minimatch": "^3.1.2",
-        "strip-json-comments": "^3.1.1"
+        "@commitlint/types": "^19.5.0",
+        "semver": "^7.6.0"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint/js": {
-      "version": "9.17.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.17.0.tgz",
-      "integrity": "sha512-Sxc4hqcs1kTu0iID3kcZDW3JHq2a77HO9P8CP6YEA/FpH3Ll8UXE2r/86Rz9YJLKme39S9vU5OWNjC6Xl0Cr3w==",
+    "node_modules/@commitlint/is-ignored/node_modules/semver": {
+      "version": "7.6.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
+      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
       "dev": true,
+      "bin": {
+        "semver": "bin/semver.js"
+      },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=10"
       }
     },
-    "node_modules/@eslint/object-schema": {
-      "version": "2.1.5",
-      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz",
-      "integrity": "sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==",
+    "node_modules/@commitlint/lint": {
+      "version": "19.6.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/lint/-/lint-19.6.0.tgz",
+      "integrity": "sha512-LRo7zDkXtcIrpco9RnfhOKeg8PAnE3oDDoalnrVU/EVaKHYBWYL1DlRR7+3AWn0JiBqD8yKOfetVxJGdEtZ0tg==",
       "dev": true,
+      "dependencies": {
+        "@commitlint/is-ignored": "^19.6.0",
+        "@commitlint/parse": "^19.5.0",
+        "@commitlint/rules": "^19.6.0",
+        "@commitlint/types": "^19.5.0"
+      },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@eslint/plugin-kit": {
-      "version": "0.2.4",
-      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.4.tgz",
-      "integrity": "sha512-zSkKow6H5Kdm0ZUQUB2kV5JIXqoG0+uH5YADhaEHswm664N9Db8dXSi0nMJpacpMf+MyyglF1vnZohpEg5yUtg==",
+    "node_modules/@commitlint/load": {
+      "version": "19.6.1",
+      "resolved": "https://registry.npmjs.org/@commitlint/load/-/load-19.6.1.tgz",
+      "integrity": "sha512-kE4mRKWWNju2QpsCWt428XBvUH55OET2N4QKQ0bF85qS/XbsRGG1MiTByDNlEVpEPceMkDr46LNH95DtRwcsfA==",
       "dev": true,
       "dependencies": {
-        "levn": "^0.4.1"
+        "@commitlint/config-validator": "^19.5.0",
+        "@commitlint/execute-rule": "^19.5.0",
+        "@commitlint/resolve-extends": "^19.5.0",
+        "@commitlint/types": "^19.5.0",
+        "chalk": "^5.3.0",
+        "cosmiconfig": "^9.0.0",
+        "cosmiconfig-typescript-loader": "^6.1.0",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.merge": "^4.6.2",
+        "lodash.uniq": "^4.5.0"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@humanfs/core": {
-      "version": "0.19.1",
-      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
-      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
+    "node_modules/@commitlint/load/node_modules/chalk": {
+      "version": "5.4.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.0.tgz",
+      "integrity": "sha512-ZkD35Mx92acjB2yNJgziGqT9oKHEOxjTBTDRpOsRWtdecL/0jM3z5kM/CTzHWvHIen1GvkM85p6TuFfDGfc8/Q==",
       "dev": true,
       "engines": {
-        "node": ">=18.18.0"
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/@humanfs/node": {
-      "version": "0.16.6",
-      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
-      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
+    "node_modules/@commitlint/message": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/message/-/message-19.5.0.tgz",
+      "integrity": "sha512-R7AM4YnbxN1Joj1tMfCyBryOC5aNJBdxadTZkuqtWi3Xj0kMdutq16XQwuoGbIzL2Pk62TALV1fZDCv36+JhTQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=v18"
+      }
+    },
+    "node_modules/@commitlint/parse": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/parse/-/parse-19.5.0.tgz",
+      "integrity": "sha512-cZ/IxfAlfWYhAQV0TwcbdR1Oc0/r0Ik1GEessDJ3Lbuma/MRO8FRQX76eurcXtmhJC//rj52ZSZuXUg0oIX0Fw==",
       "dev": true,
       "dependencies": {
-        "@humanfs/core": "^0.19.1",
-        "@humanwhocodes/retry": "^0.3.0"
+        "@commitlint/types": "^19.5.0",
+        "conventional-changelog-angular": "^7.0.0",
+        "conventional-commits-parser": "^5.0.0"
       },
       "engines": {
-        "node": ">=18.18.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
-      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
+    "node_modules/@commitlint/read": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/read/-/read-19.5.0.tgz",
+      "integrity": "sha512-TjS3HLPsLsxFPQj6jou8/CZFAmOP2y+6V4PGYt3ihbQKTY1Jnv0QG28WRKl/d1ha6zLODPZqsxLEov52dhR9BQ==",
       "dev": true,
-      "engines": {
-        "node": ">=18.18"
+      "dependencies": {
+        "@commitlint/top-level": "^19.5.0",
+        "@commitlint/types": "^19.5.0",
+        "git-raw-commits": "^4.0.0",
+        "minimist": "^1.2.8",
+        "tinyexec": "^0.3.0"
       },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@humanwhocodes/module-importer": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
-      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+    "node_modules/@commitlint/resolve-extends": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/resolve-extends/-/resolve-extends-19.5.0.tgz",
+      "integrity": "sha512-CU/GscZhCUsJwcKTJS9Ndh3AKGZTNFIOoQB2n8CmFnizE0VnEuJoum+COW+C1lNABEeqk6ssfc1Kkalm4bDklA==",
       "dev": true,
-      "engines": {
-        "node": ">=12.22"
+      "dependencies": {
+        "@commitlint/config-validator": "^19.5.0",
+        "@commitlint/types": "^19.5.0",
+        "global-directory": "^4.0.1",
+        "import-meta-resolve": "^4.0.0",
+        "lodash.mergewith": "^4.6.2",
+        "resolve-from": "^5.0.0"
       },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@humanwhocodes/retry": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz",
-      "integrity": "sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==",
+    "node_modules/@commitlint/resolve-extends/node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
       "dev": true,
       "engines": {
-        "node": ">=18.18"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+        "node": ">=8"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
-      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
+    "node_modules/@commitlint/rules": {
+      "version": "19.6.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/rules/-/rules-19.6.0.tgz",
+      "integrity": "sha512-1f2reW7lbrI0X0ozZMesS/WZxgPa4/wi56vFuJENBmed6mWq5KsheN/nxqnl/C23ioxpPO/PL6tXpiiFy5Bhjw==",
       "dev": true,
       "dependencies": {
-        "camelcase": "^5.3.1",
-        "find-up": "^4.1.0",
-        "get-package-type": "^0.1.0",
-        "js-yaml": "^3.13.1",
-        "resolve-from": "^5.0.0"
+        "@commitlint/ensure": "^19.5.0",
+        "@commitlint/message": "^19.5.0",
+        "@commitlint/to-lines": "^19.5.0",
+        "@commitlint/types": "^19.5.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">=v18"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
-      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+    "node_modules/@commitlint/to-lines": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/to-lines/-/to-lines-19.5.0.tgz",
+      "integrity": "sha512-R772oj3NHPkodOSRZ9bBVNq224DOxQtNef5Pl8l2M8ZnkkzQfeSTr4uxawV2Sd3ui05dUVzvLNnzenDBO1KBeQ==",
       "dev": true,
-      "dependencies": {
-        "sprintf-js": "~1.0.2"
+      "engines": {
+        "node": ">=v18"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+    "node_modules/@commitlint/top-level": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/top-level/-/top-level-19.5.0.tgz",
+      "integrity": "sha512-IP1YLmGAk0yWrImPRRc578I3dDUI5A2UBJx9FbSOjxe9sTlzFiwVJ+zeMLgAtHMtGZsC8LUnzmW1qRemkFU4ng==",
       "dev": true,
       "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
+        "find-up": "^7.0.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">=v18"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
-      "version": "3.14.1",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
-      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+    "node_modules/@commitlint/top-level/node_modules/find-up": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-7.0.0.tgz",
+      "integrity": "sha512-YyZM99iHrqLKjmt4LJDj58KI+fYyufRLBSYcqycxf//KpBk9FoewoGX0450m9nB44qrZnovzC2oeP5hUibxc/g==",
       "dev": true,
       "dependencies": {
-        "argparse": "^1.0.7",
-        "esprima": "^4.0.0"
+        "locate-path": "^7.2.0",
+        "path-exists": "^5.0.0",
+        "unicorn-magic": "^0.1.0"
       },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+    "node_modules/@commitlint/top-level/node_modules/locate-path": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.2.0.tgz",
+      "integrity": "sha512-gvVijfZvn7R+2qyPX8mAuKcFGDf6Nc61GdvGafQsHL0sBIxfKzA+usWn4GFC/bk+QdwPUD4kWFJLhElipq+0VA==",
       "dev": true,
       "dependencies": {
-        "p-locate": "^4.1.0"
+        "p-locate": "^6.0.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+    "node_modules/@commitlint/top-level/node_modules/p-limit": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
+      "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
       "dev": true,
       "dependencies": {
-        "p-try": "^2.0.0"
+        "yocto-queue": "^1.0.0"
       },
       "engines": {
-        "node": ">=6"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+    "node_modules/@commitlint/top-level/node_modules/p-locate": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
+      "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
       "dev": true,
       "dependencies": {
-        "p-limit": "^2.2.0"
+        "p-limit": "^4.0.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
+    "node_modules/@commitlint/top-level/node_modules/path-exists": {
       "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
-      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
+      "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==",
       "dev": true,
       "engines": {
-        "node": ">=8"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
       }
     },
-    "node_modules/@istanbuljs/schema": {
-      "version": "0.1.3",
-      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
-      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
+    "node_modules/@commitlint/top-level/node_modules/yocto-queue": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.1.1.tgz",
+      "integrity": "sha512-b4JR1PFR10y1mKjhHY9LaGo6tmrgjit7hxVIeAmyMw3jegXR4dhYqLaQF5zMXZxY7tLpMyJeLjr1C4rLmkVe8g==",
       "dev": true,
       "engines": {
-        "node": ">=8"
+        "node": ">=12.20"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@jest/console": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
-      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
+    "node_modules/@commitlint/types": {
+      "version": "19.5.0",
+      "resolved": "https://registry.npmjs.org/@commitlint/types/-/types-19.5.0.tgz",
+      "integrity": "sha512-DSHae2obMSMkAtTBSOulg5X7/z+rGLxcXQIkg3OmWvY6wifojge5uVMydfhUvs7yQj+V7jNmRZ2Xzl8GJyqRgg==",
       "dev": true,
       "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "slash": "^3.0.0"
+        "@types/conventional-commits-parser": "^5.0.0",
+        "chalk": "^5.3.0"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=v18"
       }
     },
-    "node_modules/@jest/core": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
-      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
+    "node_modules/@commitlint/types/node_modules/chalk": {
+      "version": "5.4.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.0.tgz",
+      "integrity": "sha512-ZkD35Mx92acjB2yNJgziGqT9oKHEOxjTBTDRpOsRWtdecL/0jM3z5kM/CTzHWvHIen1GvkM85p6TuFfDGfc8/Q==",
       "dev": true,
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/reporters": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "exit": "^0.1.2",
-        "graceful-fs": "^4.2.9",
-        "jest-changed-files": "^29.7.0",
-        "jest-config": "^29.7.0",
-        "jest-haste-map": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-resolve": "^29.7.0",
-        "jest-resolve-dependencies": "^29.7.0",
-        "jest-runner": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "jest-watcher": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "pretty-format": "^29.7.0",
-        "slash": "^3.0.0",
-        "strip-ansi": "^6.0.0"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
       },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/@jest/environment": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
-      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
+      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
       "dev": true,
       "dependencies": {
-        "@jest/fake-timers": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-mock": "^29.7.0"
+        "@jridgewell/trace-mapping": "0.3.9"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=12"
       }
     },
-    "node_modules/@jest/expect": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
-      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
+    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
+      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
       "dev": true,
       "dependencies": {
-        "expect": "^29.7.0",
-        "jest-snapshot": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
       }
     },
-    "node_modules/@jest/expect-utils": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
-      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
-      "dev": true,
+    "node_modules/@dabh/diagnostics": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
+      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
       "dependencies": {
-        "jest-get-type": "^29.6.3"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "colorspace": "1.1.x",
+        "enabled": "2.0.x",
+        "kuler": "^2.0.0"
       }
     },
-    "node_modules/@jest/fake-timers": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
-      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.1.tgz",
+      "integrity": "sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==",
       "dev": true,
       "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@sinonjs/fake-timers": "^10.0.2",
-        "@types/node": "*",
-        "jest-message-util": "^29.7.0",
-        "jest-mock": "^29.7.0",
-        "jest-util": "^29.7.0"
+        "eslint-visitor-keys": "^3.4.3"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
       }
     },
-    "node_modules/@jest/globals": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
-      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
+    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
       "dev": true,
-      "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/expect": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "jest-mock": "^29.7.0"
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.12.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+      "dev": true,
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
       }
     },
-    "node_modules/@jest/reporters": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
-      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
+    "node_modules/@eslint/config-array": {
+      "version": "0.19.1",
+      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.1.tgz",
+      "integrity": "sha512-fo6Mtm5mWyKjA/Chy1BYTdn5mGJoDNjC7C64ug20ADsRDGrA85bN3uK3MaKbeRkRuuIEAR5N33Jr1pbm411/PA==",
       "dev": true,
       "dependencies": {
-        "@bcoe/v8-coverage": "^0.2.3",
-        "@jest/console": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "collect-v8-coverage": "^1.0.0",
-        "exit": "^0.1.2",
-        "glob": "^7.1.3",
-        "graceful-fs": "^4.2.9",
-        "istanbul-lib-coverage": "^3.0.0",
-        "istanbul-lib-instrument": "^6.0.0",
-        "istanbul-lib-report": "^3.0.0",
-        "istanbul-lib-source-maps": "^4.0.0",
-        "istanbul-reports": "^3.1.3",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "slash": "^3.0.0",
-        "string-length": "^4.0.1",
-        "strip-ansi": "^6.0.0",
-        "v8-to-istanbul": "^9.0.1"
+        "@eslint/object-schema": "^2.1.5",
+        "debug": "^4.3.1",
+        "minimatch": "^3.1.2"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@jest/schemas": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
-      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
+    "node_modules/@eslint/core": {
+      "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.9.1.tgz",
+      "integrity": "sha512-GuUdqkyyzQI5RMIWkHhvTWLCyLo1jNK3vzkSyaExH5kHPDHcuL2VOpHjmMY+y3+NC69qAKToBqldTBgYeLSr9Q==",
       "dev": true,
       "dependencies": {
-        "@sinclair/typebox": "^0.27.8"
+        "@types/json-schema": "^7.0.15"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@jest/source-map": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
-      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
+    "node_modules/@eslint/eslintrc": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.2.0.tgz",
+      "integrity": "sha512-grOjVNN8P3hjJn/eIETF1wwd12DdnwFDoyceUJLYYdkpbwq3nLi+4fqrTAONx7XDALqlL220wC/RHSC/QTI/0w==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "callsites": "^3.0.0",
-        "graceful-fs": "^4.2.9"
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^10.0.1",
+        "globals": "^14.0.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
       }
     },
-    "node_modules/@jest/test-result": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
-      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
+    "node_modules/@eslint/eslintrc/node_modules/globals": {
+      "version": "14.0.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
+      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
       "dev": true,
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/istanbul-lib-coverage": "^2.0.0",
-        "collect-v8-coverage": "^1.0.0"
+      "engines": {
+        "node": ">=18"
       },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "9.17.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.17.0.tgz",
+      "integrity": "sha512-Sxc4hqcs1kTu0iID3kcZDW3JHq2a77HO9P8CP6YEA/FpH3Ll8UXE2r/86Rz9YJLKme39S9vU5OWNjC6Xl0Cr3w==",
+      "dev": true,
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@jest/test-sequencer": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
-      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
+    "node_modules/@eslint/object-schema": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.5.tgz",
+      "integrity": "sha512-o0bhxnL89h5Bae5T318nFoFzGy+YE5i/gGkoPAgkmTVdRKTiv3p8JHevPiPaMwoloKfEiiaHlawCqaZMqRm+XQ==",
       "dev": true,
-      "dependencies": {
-        "@jest/test-result": "^29.7.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "slash": "^3.0.0"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@jest/transform": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
-      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
+    "node_modules/@eslint/plugin-kit": {
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.4.tgz",
+      "integrity": "sha512-zSkKow6H5Kdm0ZUQUB2kV5JIXqoG0+uH5YADhaEHswm664N9Db8dXSi0nMJpacpMf+MyyglF1vnZohpEg5yUtg==",
       "dev": true,
       "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@jest/types": "^29.6.3",
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "babel-plugin-istanbul": "^6.1.1",
-        "chalk": "^4.0.0",
-        "convert-source-map": "^2.0.0",
-        "fast-json-stable-stringify": "^2.1.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "pirates": "^4.0.4",
-        "slash": "^3.0.0",
-        "write-file-atomic": "^4.0.2"
+        "levn": "^0.4.1"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
-    "node_modules/@jest/types": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
-      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
+    "node_modules/@humanfs/core": {
+      "version": "0.19.1",
+      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
+      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
       "dev": true,
-      "dependencies": {
-        "@jest/schemas": "^29.6.3",
-        "@types/istanbul-lib-coverage": "^2.0.0",
-        "@types/istanbul-reports": "^3.0.0",
-        "@types/node": "*",
-        "@types/yargs": "^17.0.8",
-        "chalk": "^4.0.0"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=18.18.0"
       }
     },
-    "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.8",
-      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
-      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+    "node_modules/@humanfs/node": {
+      "version": "0.16.6",
+      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
+      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/set-array": "^1.2.1",
-        "@jridgewell/sourcemap-codec": "^1.4.10",
-        "@jridgewell/trace-mapping": "^0.3.24"
+        "@humanfs/core": "^0.19.1",
+        "@humanwhocodes/retry": "^0.3.0"
       },
       "engines": {
-        "node": ">=6.0.0"
+        "node": ">=18.18.0"
       }
     },
-    "node_modules/@jridgewell/resolve-uri": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
-      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
+      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
       "dev": true,
       "engines": {
-        "node": ">=6.0.0"
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
       }
     },
-    "node_modules/@jridgewell/set-array": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
-      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
       "dev": true,
       "engines": {
-        "node": ">=6.0.0"
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
       }
     },
-    "node_modules/@jridgewell/sourcemap-codec": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
-      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
-      "dev": true
-    },
-    "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.25",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
-      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+    "node_modules/@humanwhocodes/retry": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.1.tgz",
+      "integrity": "sha512-c7hNEllBlenFTHBky65mhq8WD2kbN9Q6gk0bTk8lSBvc554jpXSkST1iePudpt7+A/AQvuHs9EMqjHDXMY1lrA==",
       "dev": true,
-      "dependencies": {
-        "@jridgewell/resolve-uri": "^3.1.0",
-        "@jridgewell/sourcemap-codec": "^1.4.14"
-      }
-    },
-    "node_modules/@mapbox/node-pre-gyp": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
+      "engines": {
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
+      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
+      "dev": true,
+      "dependencies": {
+        "camelcase": "^5.3.1",
+        "find-up": "^4.1.0",
+        "get-package-type": "^0.1.0",
+        "js-yaml": "^3.13.1",
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "dev": true,
+      "dependencies": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "dev": true,
+      "dependencies": {
+        "p-locate": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
+      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+      "dev": true,
+      "dependencies": {
+        "p-try": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "dev": true,
+      "dependencies": {
+        "p-limit": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/schema": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
+      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/console": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
+      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
+      "dev": true,
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/core": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
+      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
+      "dev": true,
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/reporters": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "exit": "^0.1.2",
+        "graceful-fs": "^4.2.9",
+        "jest-changed-files": "^29.7.0",
+        "jest-config": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-resolve-dependencies": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "jest-watcher": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/environment": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
+      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
+      "dev": true,
+      "dependencies": {
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/expect": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
+      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
+      "dev": true,
+      "dependencies": {
+        "expect": "^29.7.0",
+        "jest-snapshot": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/expect-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
+      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
+      "dev": true,
+      "dependencies": {
+        "jest-get-type": "^29.6.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/fake-timers": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
+      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
+      "dev": true,
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@sinonjs/fake-timers": "^10.0.2",
+        "@types/node": "*",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/globals": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
+      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
+      "dev": true,
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/reporters": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
+      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
+      "dev": true,
+      "dependencies": {
+        "@bcoe/v8-coverage": "^0.2.3",
+        "@jest/console": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "collect-v8-coverage": "^1.0.0",
+        "exit": "^0.1.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "istanbul-lib-coverage": "^3.0.0",
+        "istanbul-lib-instrument": "^6.0.0",
+        "istanbul-lib-report": "^3.0.0",
+        "istanbul-lib-source-maps": "^4.0.0",
+        "istanbul-reports": "^3.1.3",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "slash": "^3.0.0",
+        "string-length": "^4.0.1",
+        "strip-ansi": "^6.0.0",
+        "v8-to-istanbul": "^9.0.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/schemas": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
+      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
+      "dev": true,
+      "dependencies": {
+        "@sinclair/typebox": "^0.27.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/source-map": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
+      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "callsites": "^3.0.0",
+        "graceful-fs": "^4.2.9"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-result": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
+      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
+      "dev": true,
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "collect-v8-coverage": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-sequencer": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
+      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
+      "dev": true,
+      "dependencies": {
+        "@jest/test-result": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/transform": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
+      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
+      "dev": true,
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "babel-plugin-istanbul": "^6.1.1",
+        "chalk": "^4.0.0",
+        "convert-source-map": "^2.0.0",
+        "fast-json-stable-stringify": "^2.1.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pirates": "^4.0.4",
+        "slash": "^3.0.0",
+        "write-file-atomic": "^4.0.2"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/types": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
+      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
+      "dev": true,
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "@types/istanbul-reports": "^3.0.0",
+        "@types/node": "*",
+        "@types/yargs": "^17.0.8",
+        "chalk": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.8",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
+      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/set-array": "^1.2.1",
+        "@jridgewell/sourcemap-codec": "^1.4.10",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/set-array": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
+      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
+      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
+      "dev": true
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.25",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
+      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@jsdevtools/ono": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/@jsdevtools/ono/-/ono-7.1.3.tgz",
+      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg=="
+    },
+    "node_modules/@mapbox/node-pre-gyp": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
       "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
       "dependencies": {
         "detect-libc": "^2.0.0",
@@ -1330,6 +1960,12 @@
         "@prisma/debug": "6.1.0"
       }
     },
+    "node_modules/@scarf/scarf": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.4.0.tgz",
+      "integrity": "sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==",
+      "hasInstallScript": true
+    },
     "node_modules/@sinclair/typebox": {
       "version": "0.27.8",
       "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
@@ -1432,7 +2068,6 @@
       "version": "1.19.5",
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
       "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
-      "dev": true,
       "dependencies": {
         "@types/connect": "*",
         "@types/node": "*"
@@ -1442,6 +2077,14 @@
       "version": "3.4.38",
       "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
       "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/conventional-commits-parser": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/@types/conventional-commits-parser/-/conventional-commits-parser-5.0.1.tgz",
+      "integrity": "sha512-7uz5EHdzz2TqoMfV7ee61Egf5y6NkcO4FB/1iCCQnbeiI1F3xzv3vK5dBCXUCLQgGYS+mUeigK1iKQzvED+QnQ==",
       "dev": true,
       "dependencies": {
         "@types/node": "*"
@@ -1472,7 +2115,6 @@
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/@types/express/-/express-5.0.0.tgz",
       "integrity": "sha512-DvZriSMehGHL1ZNLzi6MidnsDhUZM/x2pRdDIKdwbUNqqwHxMlRdkxtn6/EPKyqKpHqTl/4nRZsRNLpZxZRpPQ==",
-      "dev": true,
       "dependencies": {
         "@types/body-parser": "*",
         "@types/express-serve-static-core": "^5.0.0",
@@ -1484,7 +2126,6 @@
       "version": "5.0.2",
       "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.2.tgz",
       "integrity": "sha512-vluaspfvWEtE4vcSDlKRNer52DvOGrB2xv6diXy6UKyKW0lqZiWHGNApSyxOv+8DE5Z27IzVvE7hNkxg7EXIcg==",
-      "dev": true,
       "dependencies": {
         "@types/node": "*",
         "@types/qs": "*",
@@ -1504,8 +2145,7 @@
     "node_modules/@types/http-errors": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
-      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
-      "dev": true
+      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA=="
     },
     "node_modules/@types/istanbul-lib-coverage": {
       "version": "2.0.6",
@@ -1544,8 +2184,7 @@
     "node_modules/@types/json-schema": {
       "version": "7.0.15",
       "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
-      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
-      "dev": true
+      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA=="
     },
     "node_modules/@types/jsonwebtoken": {
       "version": "9.0.7",
@@ -1565,14 +2204,12 @@
     "node_modules/@types/mime": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
-      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
-      "dev": true
+      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w=="
     },
     "node_modules/@types/node": {
       "version": "22.10.2",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-22.10.2.tgz",
       "integrity": "sha512-Xxr6BBRCAOQixvonOye19wnzyDiUtTeqldOOmj3CkeblonbccA12PFwlufvRdrpjXxqnmUaeiU5EOA+7s5diUQ==",
-      "dev": true,
       "dependencies": {
         "undici-types": "~6.20.0"
       }
@@ -1580,20 +2217,17 @@
     "node_modules/@types/qs": {
       "version": "6.9.17",
       "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.17.tgz",
-      "integrity": "sha512-rX4/bPcfmvxHDv0XjfJELTTr+iB+tn032nPILqHm5wbthUUUuVtNGGqzhya9XUxjTP8Fpr0qYgSZZKxGY++svQ==",
-      "dev": true
+      "integrity": "sha512-rX4/bPcfmvxHDv0XjfJELTTr+iB+tn032nPILqHm5wbthUUUuVtNGGqzhya9XUxjTP8Fpr0qYgSZZKxGY++svQ=="
     },
     "node_modules/@types/range-parser": {
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
-      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
-      "dev": true
+      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ=="
     },
     "node_modules/@types/send": {
       "version": "0.17.4",
       "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
       "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
-      "dev": true,
       "dependencies": {
         "@types/mime": "^1",
         "@types/node": "*"
@@ -1603,7 +2237,6 @@
       "version": "1.15.7",
       "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
       "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
-      "dev": true,
       "dependencies": {
         "@types/http-errors": "*",
         "@types/node": "*",
@@ -1650,6 +2283,20 @@
         "@types/superagent": "^8.1.0"
       }
     },
+    "node_modules/@types/swagger-jsdoc": {
+      "version": "6.0.4",
+      "resolved": "https://registry.npmjs.org/@types/swagger-jsdoc/-/swagger-jsdoc-6.0.4.tgz",
+      "integrity": "sha512-W+Xw5epcOZrF/AooUM/PccNMSAFOKWZA5dasNyMujTwsBkU74njSJBpvCCJhHAJ95XRMzQrrW844Btu0uoetwQ=="
+    },
+    "node_modules/@types/swagger-ui-express": {
+      "version": "4.1.7",
+      "resolved": "https://registry.npmjs.org/@types/swagger-ui-express/-/swagger-ui-express-4.1.7.tgz",
+      "integrity": "sha512-ovLM9dNincXkzH4YwyYpll75vhzPBlWx6La89wwvYH7mHjVpf0X0K/vR/aUM7SRxmr5tt9z7E5XJcjQ46q+S3g==",
+      "dependencies": {
+        "@types/express": "*",
+        "@types/serve-static": "*"
+      }
+    },
     "node_modules/@types/triple-beam": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
@@ -2033,14 +2680,19 @@
     "node_modules/argparse": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
-      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
     },
     "node_modules/array-flatten": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
       "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
     },
+    "node_modules/array-ify": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/array-ify/-/array-ify-1.0.0.tgz",
+      "integrity": "sha512-c5AMf34bKdvPhQ7tBGhqkgKNUzMr4WUs+WDtC2ZUGOUncbxKMTvqxYctiseW3+L4bA8ec+GcZ6/A/FW4m8ukng==",
+      "dev": true
+    },
     "node_modules/asap": {
       "version": "2.0.6",
       "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
@@ -2354,6 +3006,11 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/call-me-maybe": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.2.tgz",
+      "integrity": "sha512-HpX65o1Hnr9HH25ojC1YGs7HCQLq0GCOibSaWER0eNpgJ/Z1MZv2mTc7+xh6WOPxbRVcmgbv4hGU+uSQ/2xFZQ=="
+    },
     "node_modules/callsites": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
@@ -2482,6 +3139,87 @@
       "integrity": "sha512-cuSVIHi9/9E/+821Qjdvngor+xpnlwnuwIyZOaLmHBVdXL+gP+I6QQB9VkO7RI77YIcTV+S1W9AreJ5eN63JBA==",
       "dev": true
     },
+    "node_modules/cli-cursor": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz",
+      "integrity": "sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==",
+      "dev": true,
+      "dependencies": {
+        "restore-cursor": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/cli-truncate": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz",
+      "integrity": "sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==",
+      "dev": true,
+      "dependencies": {
+        "slice-ansi": "^5.0.0",
+        "string-width": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/cli-truncate/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/cli-truncate/node_modules/emoji-regex": {
+      "version": "10.4.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
+      "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
+      "dev": true
+    },
+    "node_modules/cli-truncate/node_modules/string-width": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
+      "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
+      "dev": true,
+      "dependencies": {
+        "emoji-regex": "^10.3.0",
+        "get-east-asian-width": "^1.0.0",
+        "strip-ansi": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/cli-truncate/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
     "node_modules/cliui": {
       "version": "8.0.1",
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
@@ -2568,6 +3306,12 @@
       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
       "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw=="
     },
+    "node_modules/colorette": {
+      "version": "2.0.20",
+      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
+      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
+      "dev": true
+    },
     "node_modules/colorspace": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
@@ -2589,6 +3333,24 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/commander": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.0.tgz",
+      "integrity": "sha512-zP4jEKbe8SHzKJYQmq8Y9gYjtO/POJLgIdKgV7B9qNmABVFVc+ctqSX6iXh4mCpJfRBOabiZ2YKPg8ciDw6C+Q==",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/compare-func": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/compare-func/-/compare-func-2.0.0.tgz",
+      "integrity": "sha512-zHig5N+tPWARooBnb0Zx1MFcdfpyJrfTJ3Y5L+IFvUm8rM74hHz66z0gw0x4tijh5CorKkKUCnW82R2vmpeCRA==",
+      "dev": true,
+      "dependencies": {
+        "array-ify": "^1.0.0",
+        "dot-prop": "^5.1.0"
+      }
+    },
     "node_modules/component-emitter": {
       "version": "1.3.1",
       "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz",
@@ -2627,6 +3389,48 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/conventional-changelog-angular": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/conventional-changelog-angular/-/conventional-changelog-angular-7.0.0.tgz",
+      "integrity": "sha512-ROjNchA9LgfNMTTFSIWPzebCwOGFdgkEq45EnvvrmSLvCtAw0HSmrCs7/ty+wAeYUZyNay0YMUNYFTRL72PkBQ==",
+      "dev": true,
+      "dependencies": {
+        "compare-func": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/conventional-changelog-conventionalcommits": {
+      "version": "7.0.2",
+      "resolved": "https://registry.npmjs.org/conventional-changelog-conventionalcommits/-/conventional-changelog-conventionalcommits-7.0.2.tgz",
+      "integrity": "sha512-NKXYmMR/Hr1DevQegFB4MwfM5Vv0m4UIxKZTTYuD98lpTknaZlSRrDOG4X7wIXpGkfsYxZTghUN+Qq+T0YQI7w==",
+      "dev": true,
+      "dependencies": {
+        "compare-func": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/conventional-commits-parser": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/conventional-commits-parser/-/conventional-commits-parser-5.0.0.tgz",
+      "integrity": "sha512-ZPMl0ZJbw74iS9LuX9YIAiW8pfM5p3yh2o/NbXHbkFuZzY5jvdi5jFycEOkmBW5H5I7nA+D6f3UcsCLP2vvSEA==",
+      "dev": true,
+      "dependencies": {
+        "is-text-path": "^2.0.0",
+        "JSONStream": "^1.3.5",
+        "meow": "^12.0.1",
+        "split2": "^4.0.0"
+      },
+      "bin": {
+        "conventional-commits-parser": "cli.mjs"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
     "node_modules/convert-source-map": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
@@ -2664,6 +3468,49 @@
         "node": ">= 0.10"
       }
     },
+    "node_modules/cosmiconfig": {
+      "version": "9.0.0",
+      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz",
+      "integrity": "sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==",
+      "dev": true,
+      "dependencies": {
+        "env-paths": "^2.2.1",
+        "import-fresh": "^3.3.0",
+        "js-yaml": "^4.1.0",
+        "parse-json": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/d-fischer"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.9.5"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/cosmiconfig-typescript-loader": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/cosmiconfig-typescript-loader/-/cosmiconfig-typescript-loader-6.1.0.tgz",
+      "integrity": "sha512-tJ1w35ZRUiM5FeTzT7DtYWAFFv37ZLqSRkGi2oeCK1gPhvaWjkAtfXvLmvE1pRfxxp9aQo6ba/Pvg1dKj05D4g==",
+      "dev": true,
+      "dependencies": {
+        "jiti": "^2.4.1"
+      },
+      "engines": {
+        "node": ">=v18"
+      },
+      "peerDependencies": {
+        "@types/node": "*",
+        "cosmiconfig": ">=9",
+        "typescript": ">=5"
+      }
+    },
     "node_modules/create-jest": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
@@ -2705,6 +3552,18 @@
         "node": ">= 8"
       }
     },
+    "node_modules/dargs": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/dargs/-/dargs-8.1.0.tgz",
+      "integrity": "sha512-wAV9QHOsNbwnWdNW2FYvE1P56wtgSbM+3SZcdGiWQILwVjACCXDCI3Ai8QlCjMDB8YK5zySiXZYBiwGmNY3lnw==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/debug": {
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
@@ -2721,6 +3580,15 @@
         }
       }
     },
+    "node_modules/decamelize": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
+      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/dedent": {
       "version": "1.5.3",
       "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.3.tgz",
@@ -2826,6 +3694,29 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
+    "node_modules/doctrine": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/dot-prop": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
+      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
+      "dev": true,
+      "dependencies": {
+        "is-obj": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/dunder-proto": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
@@ -2912,6 +3803,27 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/env-paths": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
+      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/environment": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/environment/-/environment-1.1.0.tgz",
+      "integrity": "sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/error-ex": {
       "version": "1.3.2",
       "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
@@ -3170,7 +4082,6 @@
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
       "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
-      "dev": true,
       "engines": {
         "node": ">=0.10.0"
       }
@@ -3183,6 +4094,12 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/eventemitter3": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
+      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
+      "dev": true
+    },
     "node_modules/execa": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
@@ -3361,6 +4278,12 @@
       "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
       "dev": true
     },
+    "node_modules/fast-uri": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.3.tgz",
+      "integrity": "sha512-aLrHthzCjH5He4Z2H9YZ+v6Ujb9ocRuW6ZzkJQOrTxleEijANq4v1TsaPaVG1PZcuurEzrLcWRyYBYXD5cEiaw==",
+      "dev": true
+    },
     "node_modules/fastq": {
       "version": "1.17.1",
       "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
@@ -3595,147 +4518,452 @@
         "darwin"
       ],
       "engines": {
-        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
-      }
-    },
-    "node_modules/function-bind": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
-      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gauge": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
+      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
+      "deprecated": "This package is no longer supported.",
+      "dependencies": {
+        "aproba": "^1.0.3 || ^2.0.0",
+        "color-support": "^1.1.2",
+        "console-control-strings": "^1.0.0",
+        "has-unicode": "^2.0.1",
+        "object-assign": "^4.1.1",
+        "signal-exit": "^3.0.0",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wide-align": "^1.1.2"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/get-caller-file": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "dev": true,
+      "engines": {
+        "node": "6.* || 8.* || >= 10.*"
+      }
+    },
+    "node_modules/get-east-asian-width": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.3.0.tgz",
+      "integrity": "sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.6.tgz",
+      "integrity": "sha512-qxsEs+9A+u85HhllWJJFicJfPDhRmjzoYdl64aMWW9yRIJmSyxdn8IEkuIM530/7T+lv0TIHd8L6Q/ra0tEoeA==",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "dunder-proto": "^1.0.0",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "function-bind": "^1.1.2",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-package-type": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
+      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/get-stream": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
+      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/git-raw-commits": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/git-raw-commits/-/git-raw-commits-4.0.0.tgz",
+      "integrity": "sha512-ICsMM1Wk8xSGMowkOmPrzo2Fgmfo4bMHLNX6ytHjajRJUqvHOw/TFapQ+QG75c3X/tTDDhOSRPGC52dDbNM8FQ==",
+      "dev": true,
+      "dependencies": {
+        "dargs": "^8.0.0",
+        "meow": "^12.0.1",
+        "split2": "^4.0.0"
+      },
+      "bin": {
+        "git-raw-commits": "cli.mjs"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "dev": true,
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/global-directory": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/global-directory/-/global-directory-4.0.1.tgz",
+      "integrity": "sha512-wHTUcDUoZ1H5/0iVqEudYW4/kAlN5cZ3j/bXn0Dpbizl9iaUVeWSHqiOjsgk6OW2bkLclbBjzewBz6weQ1zA2Q==",
+      "dev": true,
+      "dependencies": {
+        "ini": "4.1.1"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/globals": {
+      "version": "15.14.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-15.14.0.tgz",
+      "integrity": "sha512-OkToC372DtlQeje9/zHIo5CT8lRP/FUgEOKBEhU4e0abL7J7CD24fD9ohiLN5hagG/kWCYj4K5oaxxtj2Z0Dig==",
+      "dev": true,
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "dev": true
+    },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-unicode": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
+      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/helmet": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
+      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw==",
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/hexoid": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-2.0.0.tgz",
+      "integrity": "sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/html-escaper": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
+      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
+      "dev": true
+    },
+    "node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
       }
     },
-    "node_modules/gauge": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
-      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
-      "deprecated": "This package is no longer supported.",
+    "node_modules/https-proxy-agent": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
+      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
       "dependencies": {
-        "aproba": "^1.0.3 || ^2.0.0",
-        "color-support": "^1.1.2",
-        "console-control-strings": "^1.0.0",
-        "has-unicode": "^2.0.1",
-        "object-assign": "^4.1.1",
-        "signal-exit": "^3.0.0",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1",
-        "wide-align": "^1.1.2"
+        "agent-base": "6",
+        "debug": "4"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">= 6"
       }
     },
-    "node_modules/gensync": {
-      "version": "1.0.0-beta.2",
-      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
-      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+    "node_modules/human-signals": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
+      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
       "dev": true,
       "engines": {
-        "node": ">=6.9.0"
+        "node": ">=10.17.0"
       }
     },
-    "node_modules/get-caller-file": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
-      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+    "node_modules/husky": {
+      "version": "9.1.7",
+      "resolved": "https://registry.npmjs.org/husky/-/husky-9.1.7.tgz",
+      "integrity": "sha512-5gs5ytaNjBrh5Ow3zrvdUUY+0VxIuWVL4i9irt6friV+BqdCfmV11CQTWMiBYWHbXhco+J1kHfTOUkePhCDvMA==",
       "dev": true,
+      "bin": {
+        "husky": "bin.js"
+      },
       "engines": {
-        "node": "6.* || 8.* || >= 10.*"
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/typicode"
       }
     },
-    "node_modules/get-intrinsic": {
-      "version": "1.2.6",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.6.tgz",
-      "integrity": "sha512-qxsEs+9A+u85HhllWJJFicJfPDhRmjzoYdl64aMWW9yRIJmSyxdn8IEkuIM530/7T+lv0TIHd8L6Q/ra0tEoeA==",
+    "node_modules/iconv-lite": {
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
       "dependencies": {
-        "call-bind-apply-helpers": "^1.0.1",
-        "dunder-proto": "^1.0.0",
-        "es-define-property": "^1.0.1",
-        "es-errors": "^1.3.0",
-        "es-object-atoms": "^1.0.0",
-        "function-bind": "^1.1.2",
-        "gopd": "^1.2.0",
-        "has-symbols": "^1.1.0",
-        "hasown": "^2.0.2",
-        "math-intrinsics": "^1.0.0"
+        "safer-buffer": ">= 2.1.2 < 3"
       },
       "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/get-package-type": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
-      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
+    "node_modules/ignore": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
       "dev": true,
       "engines": {
-        "node": ">=8.0.0"
+        "node": ">= 4"
       }
     },
-    "node_modules/get-stream": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
-      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
+    "node_modules/import-fresh": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
+      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
       "dev": true,
+      "dependencies": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      },
       "engines": {
-        "node": ">=10"
+        "node": ">=6"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
+    "node_modules/import-local": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
+      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
+      "dev": true,
       "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
+        "pkg-dir": "^4.2.0",
+        "resolve-cwd": "^3.0.0"
+      },
+      "bin": {
+        "import-local-fixture": "fixtures/cli.js"
       },
       "engines": {
-        "node": "*"
+        "node": ">=8"
       },
       "funding": {
-        "url": "https://github.com/sponsors/isaacs"
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/glob-parent": {
-      "version": "6.0.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
-      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+    "node_modules/import-meta-resolve": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/import-meta-resolve/-/import-meta-resolve-4.1.0.tgz",
+      "integrity": "sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==",
+      "dev": true,
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
       "dev": true,
-      "dependencies": {
-        "is-glob": "^4.0.3"
-      },
       "engines": {
-        "node": ">=10.13.0"
+        "node": ">=0.8.19"
       }
     },
-    "node_modules/globals": {
-      "version": "14.0.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
-      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+    },
+    "node_modules/ini": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/ini/-/ini-4.1.1.tgz",
+      "integrity": "sha512-QQnnxNyfvmHFIsj7gkPcYymR8Jdw/o7mp5ZFihxn6h8Ci6fh3Dx4E1gPjpQEpIuPo9XVNY/ZUwh4BPMjGyL01g==",
       "dev": true,
       "engines": {
-        "node": ">=18"
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/ipaddr.js": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
+      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+      "dev": true
+    },
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+      "dev": true,
+      "dependencies": {
+        "binary-extensions": "^2.0.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+      "engines": {
+        "node": ">=8"
       }
     },
-    "node_modules/gopd": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
-      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+    "node_modules/is-core-module": {
+      "version": "2.16.0",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.0.tgz",
+      "integrity": "sha512-urTSINYfAYgcbLb0yDQ6egFm6h3Mo1DcF9EkyXSRjjzdHbsulg01qhwWuXdOoUBuTkbQ80KDboXa0vFJ+BDH+g==",
+      "dev": true,
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
       "engines": {
         "node": ">= 0.4"
       },
@@ -3743,1142 +4971,1271 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/graceful-fs": {
-      "version": "4.2.11",
-      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
-      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
-      "dev": true
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
     },
-    "node_modules/graphemer": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
-      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
-      "dev": true
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-generator-fn": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
+      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "dev": true,
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.12.0"
+      }
     },
-    "node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+    "node_modules/is-obj": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
+      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
       "dev": true,
       "engines": {
         "node": ">=8"
       }
     },
-    "node_modules/has-symbols": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
-      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
       "engines": {
-        "node": ">= 0.4"
+        "node": ">=8"
       },
       "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/has-unicode": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
-      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ=="
-    },
-    "node_modules/hasown": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
-      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+    "node_modules/is-text-path": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-text-path/-/is-text-path-2.0.0.tgz",
+      "integrity": "sha512-+oDTluR6WEjdXEJMnC2z6A4FRwFoYuvShVVEGsS7ewc0UTi2QtAKMDJuL4BDEVt+5T7MjFo12RP8ghOM75oKJw==",
+      "dev": true,
       "dependencies": {
-        "function-bind": "^1.1.2"
+        "text-extensions": "^2.0.0"
       },
       "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/helmet": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
-      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw==",
-      "engines": {
-        "node": ">=18.0.0"
+        "node": ">=8"
       }
     },
-    "node_modules/hexoid": {
+    "node_modules/isexe": {
       "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-2.0.0.tgz",
-      "integrity": "sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw==",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true
+    },
+    "node_modules/istanbul-lib-coverage": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
+      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
       "dev": true,
       "engines": {
         "node": ">=8"
       }
     },
-    "node_modules/html-escaper": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
-      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
-      "dev": true
-    },
-    "node_modules/http-errors": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
-      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+    "node_modules/istanbul-lib-instrument": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
+      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
+      "dev": true,
       "dependencies": {
-        "depd": "2.0.0",
-        "inherits": "2.0.4",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "toidentifier": "1.0.1"
+        "@babel/core": "^7.23.9",
+        "@babel/parser": "^7.23.9",
+        "@istanbuljs/schema": "^0.1.3",
+        "istanbul-lib-coverage": "^3.2.0",
+        "semver": "^7.5.4"
       },
       "engines": {
-        "node": ">= 0.8"
+        "node": ">=10"
       }
     },
-    "node_modules/https-proxy-agent": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
-      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
-      "dependencies": {
-        "agent-base": "6",
-        "debug": "4"
+    "node_modules/istanbul-lib-instrument/node_modules/semver": {
+      "version": "7.6.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
+      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
+      "dev": true,
+      "bin": {
+        "semver": "bin/semver.js"
       },
       "engines": {
-        "node": ">= 6"
+        "node": ">=10"
       }
     },
-    "node_modules/human-signals": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
-      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
+    "node_modules/istanbul-lib-report": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
+      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
       "dev": true,
+      "dependencies": {
+        "istanbul-lib-coverage": "^3.0.0",
+        "make-dir": "^4.0.0",
+        "supports-color": "^7.1.0"
+      },
       "engines": {
-        "node": ">=10.17.0"
+        "node": ">=10"
       }
     },
-    "node_modules/iconv-lite": {
-      "version": "0.4.24",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
-      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+    "node_modules/istanbul-lib-source-maps": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
+      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
+      "dev": true,
       "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
+        "debug": "^4.1.1",
+        "istanbul-lib-coverage": "^3.0.0",
+        "source-map": "^0.6.1"
       },
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=10"
       }
     },
-    "node_modules/ignore": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
-      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+    "node_modules/istanbul-reports": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
+      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
       "dev": true,
+      "dependencies": {
+        "html-escaper": "^2.0.0",
+        "istanbul-lib-report": "^3.0.0"
+      },
       "engines": {
-        "node": ">= 4"
+        "node": ">=8"
       }
     },
-    "node_modules/import-fresh": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
-      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
+    "node_modules/jake": {
+      "version": "10.9.2",
+      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
+      "integrity": "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==",
       "dev": true,
       "dependencies": {
-        "parent-module": "^1.0.0",
-        "resolve-from": "^4.0.0"
+        "async": "^3.2.3",
+        "chalk": "^4.0.2",
+        "filelist": "^1.0.4",
+        "minimatch": "^3.1.2"
       },
-      "engines": {
-        "node": ">=6"
+      "bin": {
+        "jake": "bin/cli.js"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+      "engines": {
+        "node": ">=10"
       }
     },
-    "node_modules/import-local": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
-      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
+    "node_modules/jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
+      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
       "dev": true,
       "dependencies": {
-        "pkg-dir": "^4.2.0",
-        "resolve-cwd": "^3.0.0"
+        "@jest/core": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "import-local": "^3.0.2",
+        "jest-cli": "^29.7.0"
       },
       "bin": {
-        "import-local-fixture": "fixtures/cli.js"
+        "jest": "bin/jest.js"
       },
       "engines": {
-        "node": ">=8"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
       }
     },
-    "node_modules/imurmurhash": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
-      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+    "node_modules/jest-changed-files": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
+      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
       "dev": true,
-      "engines": {
-        "node": ">=0.8.19"
-      }
-    },
-    "node_modules/inflight": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
-      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
-      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
       "dependencies": {
-        "once": "^1.3.0",
-        "wrappy": "1"
-      }
-    },
-    "node_modules/inherits": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
-    },
-    "node_modules/ipaddr.js": {
-      "version": "1.9.1",
-      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
-      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+        "execa": "^5.0.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0"
+      },
       "engines": {
-        "node": ">= 0.10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/is-arrayish": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true
-    },
-    "node_modules/is-binary-path": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
-      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+    "node_modules/jest-circus": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
+      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
       "dev": true,
       "dependencies": {
-        "binary-extensions": "^2.0.0"
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "co": "^4.6.0",
+        "dedent": "^1.0.0",
+        "is-generator-fn": "^2.0.0",
+        "jest-each": "^29.7.0",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "pretty-format": "^29.7.0",
+        "pure-rand": "^6.0.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
       },
       "engines": {
-        "node": ">=8"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/is-core-module": {
-      "version": "2.16.0",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.0.tgz",
-      "integrity": "sha512-urTSINYfAYgcbLb0yDQ6egFm6h3Mo1DcF9EkyXSRjjzdHbsulg01qhwWuXdOoUBuTkbQ80KDboXa0vFJ+BDH+g==",
+    "node_modules/jest-cli": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
+      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
       "dev": true,
       "dependencies": {
-        "hasown": "^2.0.2"
+        "@jest/core": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "create-jest": "^29.7.0",
+        "exit": "^0.1.2",
+        "import-local": "^3.0.2",
+        "jest-config": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "yargs": "^17.3.1"
+      },
+      "bin": {
+        "jest": "bin/jest.js"
       },
       "engines": {
-        "node": ">= 0.4"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
       }
     },
-    "node_modules/is-extglob": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
-      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+    "node_modules/jest-config": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
+      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
       "dev": true,
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/test-sequencer": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-jest": "^29.7.0",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "deepmerge": "^4.2.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "jest-circus": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "parse-json": "^5.2.0",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-json-comments": "^3.1.1"
+      },
       "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "engines": {
-        "node": ">=8"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@types/node": "*",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
       }
     },
-    "node_modules/is-generator-fn": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
-      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
+    "node_modules/jest-diff": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
+      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
       "dev": true,
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "diff-sequences": "^29.6.3",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
       "engines": {
-        "node": ">=6"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/is-glob": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
-      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+    "node_modules/jest-docblock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
+      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
       "dev": true,
       "dependencies": {
-        "is-extglob": "^2.1.1"
+        "detect-newline": "^3.0.0"
       },
       "engines": {
-        "node": ">=0.10.0"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/is-number": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
-      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+    "node_modules/jest-each": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
+      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
       "dev": true,
-      "engines": {
-        "node": ">=0.12.0"
-      }
-    },
-    "node_modules/is-stream": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
-      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
-      "engines": {
-        "node": ">=8"
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "pretty-format": "^29.7.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/isexe": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
-      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
-      "dev": true
-    },
-    "node_modules/istanbul-lib-coverage": {
-      "version": "3.2.2",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
-      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
-      "dev": true,
       "engines": {
-        "node": ">=8"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/istanbul-lib-instrument": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
-      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
+    "node_modules/jest-environment-node": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
+      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
       "dev": true,
       "dependencies": {
-        "@babel/core": "^7.23.9",
-        "@babel/parser": "^7.23.9",
-        "@istanbuljs/schema": "^0.1.3",
-        "istanbul-lib-coverage": "^3.2.0",
-        "semver": "^7.5.4"
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
       },
       "engines": {
-        "node": ">=10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/istanbul-lib-instrument/node_modules/semver": {
-      "version": "7.6.3",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
-      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
+    "node_modules/jest-get-type": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
+      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
       "dev": true,
-      "bin": {
-        "semver": "bin/semver.js"
-      },
       "engines": {
-        "node": ">=10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/istanbul-lib-report": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
-      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
+    "node_modules/jest-haste-map": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
+      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
       "dev": true,
       "dependencies": {
-        "istanbul-lib-coverage": "^3.0.0",
-        "make-dir": "^4.0.0",
-        "supports-color": "^7.1.0"
+        "@jest/types": "^29.6.3",
+        "@types/graceful-fs": "^4.1.3",
+        "@types/node": "*",
+        "anymatch": "^3.0.3",
+        "fb-watchman": "^2.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "walker": "^1.0.8"
       },
       "engines": {
-        "node": ">=10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "optionalDependencies": {
+        "fsevents": "^2.3.2"
       }
     },
-    "node_modules/istanbul-lib-source-maps": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
-      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
+    "node_modules/jest-leak-detector": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
+      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
       "dev": true,
       "dependencies": {
-        "debug": "^4.1.1",
-        "istanbul-lib-coverage": "^3.0.0",
-        "source-map": "^0.6.1"
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
       },
       "engines": {
-        "node": ">=10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/istanbul-reports": {
-      "version": "3.1.7",
-      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
-      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
+    "node_modules/jest-matcher-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
+      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
       "dev": true,
       "dependencies": {
-        "html-escaper": "^2.0.0",
-        "istanbul-lib-report": "^3.0.0"
+        "chalk": "^4.0.0",
+        "jest-diff": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jake": {
-      "version": "10.9.2",
-      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
-      "integrity": "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==",
+    "node_modules/jest-message-util": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
+      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
       "dev": true,
       "dependencies": {
-        "async": "^3.2.3",
-        "chalk": "^4.0.2",
-        "filelist": "^1.0.4",
-        "minimatch": "^3.1.2"
-      },
-      "bin": {
-        "jake": "bin/cli.js"
+        "@babel/code-frame": "^7.12.13",
+        "@jest/types": "^29.6.3",
+        "@types/stack-utils": "^2.0.0",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
       },
       "engines": {
-        "node": ">=10"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest": {
+    "node_modules/jest-mock": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
-      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
+      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
+      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
       "dev": true,
       "dependencies": {
-        "@jest/core": "^29.7.0",
         "@jest/types": "^29.6.3",
-        "import-local": "^3.0.2",
-        "jest-cli": "^29.7.0"
-      },
-      "bin": {
-        "jest": "bin/jest.js"
+        "@types/node": "*",
+        "jest-util": "^29.7.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-mock-extended": {
+      "version": "4.0.0-beta1",
+      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-4.0.0-beta1.tgz",
+      "integrity": "sha512-MYcI0wQu3ceNhqKoqAJOdEfsVMamAFqDTjoLN5Y45PAG3iIm4WGnhOu0wpMjlWCexVPO71PMoNir9QrGXrnIlw==",
+      "dev": true,
+      "dependencies": {
+        "ts-essentials": "^10.0.2"
       },
       "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+        "@jest/globals": "^28.0.0 || ^29.0.0",
+        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
+        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
+      }
+    },
+    "node_modules/jest-pnp-resolver": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
+      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      },
+      "peerDependencies": {
+        "jest-resolve": "*"
       },
       "peerDependenciesMeta": {
-        "node-notifier": {
+        "jest-resolve": {
           "optional": true
         }
       }
     },
-    "node_modules/jest-changed-files": {
+    "node_modules/jest-regex-util": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
+      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
+      "dev": true,
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
-      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
+      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
+      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
       "dev": true,
       "dependencies": {
-        "execa": "^5.0.0",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-pnp-resolver": "^1.2.2",
         "jest-util": "^29.7.0",
-        "p-limit": "^3.1.0"
+        "jest-validate": "^29.7.0",
+        "resolve": "^1.20.0",
+        "resolve.exports": "^2.0.0",
+        "slash": "^3.0.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-circus": {
+    "node_modules/jest-resolve-dependencies": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
-      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
+      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
+      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
       "dev": true,
       "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/expect": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "co": "^4.6.0",
-        "dedent": "^1.0.0",
-        "is-generator-fn": "^2.0.0",
-        "jest-each": "^29.7.0",
-        "jest-matcher-utils": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "p-limit": "^3.1.0",
-        "pretty-format": "^29.7.0",
-        "pure-rand": "^6.0.0",
-        "slash": "^3.0.0",
-        "stack-utils": "^2.0.3"
+        "jest-regex-util": "^29.6.3",
+        "jest-snapshot": "^29.7.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-cli": {
+    "node_modules/jest-runner": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
-      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
+      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
+      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
       "dev": true,
       "dependencies": {
-        "@jest/core": "^29.7.0",
+        "@jest/console": "^29.7.0",
+        "@jest/environment": "^29.7.0",
         "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
         "@jest/types": "^29.6.3",
+        "@types/node": "*",
         "chalk": "^4.0.0",
-        "create-jest": "^29.7.0",
-        "exit": "^0.1.2",
-        "import-local": "^3.0.2",
-        "jest-config": "^29.7.0",
+        "emittery": "^0.13.1",
+        "graceful-fs": "^4.2.9",
+        "jest-docblock": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-leak-detector": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-resolve": "^29.7.0",
+        "jest-runtime": "^29.7.0",
         "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "yargs": "^17.3.1"
-      },
-      "bin": {
-        "jest": "bin/jest.js"
+        "jest-watcher": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "source-map-support": "0.5.13"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
       }
     },
-    "node_modules/jest-config": {
+    "node_modules/jest-runtime": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
-      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
+      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
+      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
       "dev": true,
       "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@jest/test-sequencer": "^29.7.0",
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/globals": "^29.7.0",
+        "@jest/source-map": "^29.6.3",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
         "@jest/types": "^29.6.3",
-        "babel-jest": "^29.7.0",
+        "@types/node": "*",
         "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "deepmerge": "^4.2.2",
+        "cjs-module-lexer": "^1.0.0",
+        "collect-v8-coverage": "^1.0.0",
         "glob": "^7.1.3",
         "graceful-fs": "^4.2.9",
-        "jest-circus": "^29.7.0",
-        "jest-environment-node": "^29.7.0",
-        "jest-get-type": "^29.6.3",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
         "jest-regex-util": "^29.6.3",
         "jest-resolve": "^29.7.0",
-        "jest-runner": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
         "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "parse-json": "^5.2.0",
-        "pretty-format": "^29.7.0",
         "slash": "^3.0.0",
-        "strip-json-comments": "^3.1.1"
+        "strip-bom": "^4.0.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@types/node": "*",
-        "ts-node": ">=9.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/node": {
-          "optional": true
-        },
-        "ts-node": {
-          "optional": true
-        }
       }
     },
-    "node_modules/jest-diff": {
+    "node_modules/jest-snapshot": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
-      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
+      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
+      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
       "dev": true,
       "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@babel/generator": "^7.7.2",
+        "@babel/plugin-syntax-jsx": "^7.7.2",
+        "@babel/plugin-syntax-typescript": "^7.7.2",
+        "@babel/types": "^7.3.3",
+        "@jest/expect-utils": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0",
         "chalk": "^4.0.0",
-        "diff-sequences": "^29.6.3",
+        "expect": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-diff": "^29.7.0",
         "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "natural-compare": "^1.4.0",
+        "pretty-format": "^29.7.0",
+        "semver": "^7.5.3"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-docblock": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
-      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
+    "node_modules/jest-snapshot/node_modules/semver": {
+      "version": "7.6.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
+      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
       "dev": true,
-      "dependencies": {
-        "detect-newline": "^3.0.0"
+      "bin": {
+        "semver": "bin/semver.js"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=10"
       }
     },
-    "node_modules/jest-each": {
+    "node_modules/jest-util": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
-      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
+      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
+      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
       "dev": true,
       "dependencies": {
         "@jest/types": "^29.6.3",
+        "@types/node": "*",
         "chalk": "^4.0.0",
-        "jest-get-type": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "pretty-format": "^29.7.0"
+        "ci-info": "^3.2.0",
+        "graceful-fs": "^4.2.9",
+        "picomatch": "^2.2.3"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-environment-node": {
+    "node_modules/jest-validate": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
-      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
+      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
+      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
       "dev": true,
       "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/fake-timers": "^29.7.0",
         "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-mock": "^29.7.0",
-        "jest-util": "^29.7.0"
+        "camelcase": "^6.2.0",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "leven": "^3.1.0",
+        "pretty-format": "^29.7.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-get-type": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
-      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
+    "node_modules/jest-validate/node_modules/camelcase": {
+      "version": "6.3.0",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
+      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
       "dev": true,
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/jest-haste-map": {
+    "node_modules/jest-watcher": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
-      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
+      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
+      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
       "dev": true,
       "dependencies": {
+        "@jest/test-result": "^29.7.0",
         "@jest/types": "^29.6.3",
-        "@types/graceful-fs": "^4.1.3",
         "@types/node": "*",
-        "anymatch": "^3.0.3",
-        "fb-watchman": "^2.0.0",
-        "graceful-fs": "^4.2.9",
-        "jest-regex-util": "^29.6.3",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
         "jest-util": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "walker": "^1.0.8"
+        "string-length": "^4.0.1"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "optionalDependencies": {
-        "fsevents": "^2.3.2"
       }
     },
-    "node_modules/jest-leak-detector": {
+    "node_modules/jest-worker": {
       "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
-      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
+      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
+      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
       "dev": true,
       "dependencies": {
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
+        "@types/node": "*",
+        "jest-util": "^29.7.0",
+        "merge-stream": "^2.0.0",
+        "supports-color": "^8.0.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-matcher-utils": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
-      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
+    "node_modules/jest-worker/node_modules/supports-color": {
+      "version": "8.1.1",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
       "dev": true,
       "dependencies": {
-        "chalk": "^4.0.0",
-        "jest-diff": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
+        "has-flag": "^4.0.0"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
       }
     },
-    "node_modules/jest-message-util": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
-      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
+    "node_modules/jiti": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
+      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
       "dev": true,
+      "bin": {
+        "jiti": "lib/jiti-cli.mjs"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true
+    },
+    "node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
       "dependencies": {
-        "@babel/code-frame": "^7.12.13",
-        "@jest/types": "^29.6.3",
-        "@types/stack-utils": "^2.0.0",
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "micromatch": "^4.0.4",
-        "pretty-format": "^29.7.0",
-        "slash": "^3.0.0",
-        "stack-utils": "^2.0.3"
+        "argparse": "^2.0.1"
       },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
       }
     },
-    "node_modules/jest-mock": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
-      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
+    "node_modules/jsesc": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
+      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
       "dev": true,
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-util": "^29.7.0"
+      "bin": {
+        "jsesc": "bin/jsesc"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=6"
       }
     },
-    "node_modules/jest-mock-extended": {
-      "version": "4.0.0-beta1",
-      "resolved": "https://registry.npmjs.org/jest-mock-extended/-/jest-mock-extended-4.0.0-beta1.tgz",
-      "integrity": "sha512-MYcI0wQu3ceNhqKoqAJOdEfsVMamAFqDTjoLN5Y45PAG3iIm4WGnhOu0wpMjlWCexVPO71PMoNir9QrGXrnIlw==",
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true
+    },
+    "node_modules/json-parse-even-better-errors": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+      "dev": true
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true
+    },
+    "node_modules/json-stable-stringify-without-jsonify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+      "dev": true
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
       "dev": true,
-      "dependencies": {
-        "ts-essentials": "^10.0.2"
+      "bin": {
+        "json5": "lib/cli.js"
       },
-      "peerDependencies": {
-        "@jest/globals": "^28.0.0 || ^29.0.0",
-        "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0 || ^28.0.0 || ^29.0.0",
-        "typescript": "^3.0.0 || ^4.0.0 || ^5.0.0"
+      "engines": {
+        "node": ">=6"
       }
     },
-    "node_modules/jest-pnp-resolver": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
-      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
+    "node_modules/jsonparse": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/jsonparse/-/jsonparse-1.3.1.tgz",
+      "integrity": "sha512-POQXvpdL69+CluYsillJ7SUhKvytYjW9vG/GKpnf+xP8UWgYEM/RaMzHHofbALDiKbbP1W8UEYmgGl39WkPZsg==",
       "dev": true,
+      "engines": [
+        "node >= 0.2.0"
+      ]
+    },
+    "node_modules/JSONStream": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/JSONStream/-/JSONStream-1.3.5.tgz",
+      "integrity": "sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==",
+      "dev": true,
+      "dependencies": {
+        "jsonparse": "^1.2.0",
+        "through": ">=2.2.7 <3"
+      },
+      "bin": {
+        "JSONStream": "bin.js"
+      },
       "engines": {
-        "node": ">=6"
+        "node": "*"
+      }
+    },
+    "node_modules/jsonwebtoken": {
+      "version": "9.0.2",
+      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
+      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+      "dependencies": {
+        "jws": "^3.2.2",
+        "lodash.includes": "^4.3.0",
+        "lodash.isboolean": "^3.0.3",
+        "lodash.isinteger": "^4.0.4",
+        "lodash.isnumber": "^3.0.3",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.once": "^4.0.0",
+        "ms": "^2.1.1",
+        "semver": "^7.5.4"
       },
-      "peerDependencies": {
-        "jest-resolve": "*"
+      "engines": {
+        "node": ">=12",
+        "npm": ">=6"
+      }
+    },
+    "node_modules/jsonwebtoken/node_modules/semver": {
+      "version": "7.6.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
+      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
+      "bin": {
+        "semver": "bin/semver.js"
       },
-      "peerDependenciesMeta": {
-        "jest-resolve": {
-          "optional": true
-        }
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/jwa": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
+      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
+      "dependencies": {
+        "buffer-equal-constant-time": "1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/jws": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
+      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "dependencies": {
+        "jwa": "^1.4.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "dependencies": {
+        "json-buffer": "3.0.1"
       }
     },
-    "node_modules/jest-regex-util": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
-      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
+    "node_modules/kleur": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
+      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
       "dev": true,
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=6"
       }
     },
-    "node_modules/jest-resolve": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
-      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
+    "node_modules/kuler": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
+      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
+    },
+    "node_modules/leven": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
+      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
       "dev": true,
-      "dependencies": {
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-pnp-resolver": "^1.2.2",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "resolve": "^1.20.0",
-        "resolve.exports": "^2.0.0",
-        "slash": "^3.0.0"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=6"
       }
     },
-    "node_modules/jest-resolve-dependencies": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
-      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
+    "node_modules/levn": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
       "dev": true,
       "dependencies": {
-        "jest-regex-util": "^29.6.3",
-        "jest-snapshot": "^29.7.0"
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">= 0.8.0"
       }
     },
-    "node_modules/jest-runner": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
-      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
+    "node_modules/lilconfig": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
+      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
       "dev": true,
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/environment": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "emittery": "^0.13.1",
-        "graceful-fs": "^4.2.9",
-        "jest-docblock": "^29.7.0",
-        "jest-environment-node": "^29.7.0",
-        "jest-haste-map": "^29.7.0",
-        "jest-leak-detector": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-resolve": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-watcher": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "p-limit": "^3.1.0",
-        "source-map-support": "0.5.13"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antonk52"
       }
     },
-    "node_modules/jest-runtime": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
-      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "dev": true
+    },
+    "node_modules/lint-staged": {
+      "version": "15.2.11",
+      "resolved": "https://registry.npmjs.org/lint-staged/-/lint-staged-15.2.11.tgz",
+      "integrity": "sha512-Ev6ivCTYRTGs9ychvpVw35m/bcNDuBN+mnTeObCL5h+boS5WzBEC6LHI4I9F/++sZm1m+J2LEiy0gxL/R9TBqQ==",
       "dev": true,
       "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/fake-timers": "^29.7.0",
-        "@jest/globals": "^29.7.0",
-        "@jest/source-map": "^29.6.3",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "cjs-module-lexer": "^1.0.0",
-        "collect-v8-coverage": "^1.0.0",
-        "glob": "^7.1.3",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-mock": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-resolve": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "slash": "^3.0.0",
-        "strip-bom": "^4.0.0"
+        "chalk": "~5.3.0",
+        "commander": "~12.1.0",
+        "debug": "~4.4.0",
+        "execa": "~8.0.1",
+        "lilconfig": "~3.1.3",
+        "listr2": "~8.2.5",
+        "micromatch": "~4.0.8",
+        "pidtree": "~0.6.0",
+        "string-argv": "~0.3.2",
+        "yaml": "~2.6.1"
+      },
+      "bin": {
+        "lint-staged": "bin/lint-staged.js"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=18.12.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/lint-staged"
       }
     },
-    "node_modules/jest-snapshot": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
-      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
+    "node_modules/lint-staged/node_modules/chalk": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
+      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
       "dev": true,
-      "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@babel/generator": "^7.7.2",
-        "@babel/plugin-syntax-jsx": "^7.7.2",
-        "@babel/plugin-syntax-typescript": "^7.7.2",
-        "@babel/types": "^7.3.3",
-        "@jest/expect-utils": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "babel-preset-current-node-syntax": "^1.0.0",
-        "chalk": "^4.0.0",
-        "expect": "^29.7.0",
-        "graceful-fs": "^4.2.9",
-        "jest-diff": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "jest-matcher-utils": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "natural-compare": "^1.4.0",
-        "pretty-format": "^29.7.0",
-        "semver": "^7.5.3"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/jest-snapshot/node_modules/semver": {
-      "version": "7.6.3",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
-      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
+    "node_modules/lint-staged/node_modules/commander": {
+      "version": "12.1.0",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-12.1.0.tgz",
+      "integrity": "sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==",
       "dev": true,
-      "bin": {
-        "semver": "bin/semver.js"
-      },
       "engines": {
-        "node": ">=10"
+        "node": ">=18"
       }
     },
-    "node_modules/jest-util": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
-      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
+    "node_modules/lint-staged/node_modules/execa": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-8.0.1.tgz",
+      "integrity": "sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==",
       "dev": true,
       "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "graceful-fs": "^4.2.9",
-        "picomatch": "^2.2.3"
+        "cross-spawn": "^7.0.3",
+        "get-stream": "^8.0.1",
+        "human-signals": "^5.0.0",
+        "is-stream": "^3.0.0",
+        "merge-stream": "^2.0.0",
+        "npm-run-path": "^5.1.0",
+        "onetime": "^6.0.0",
+        "signal-exit": "^4.1.0",
+        "strip-final-newline": "^3.0.0"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=16.17"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/execa?sponsor=1"
       }
     },
-    "node_modules/jest-validate": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
-      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
+    "node_modules/lint-staged/node_modules/get-stream": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz",
+      "integrity": "sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==",
       "dev": true,
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "camelcase": "^6.2.0",
-        "chalk": "^4.0.0",
-        "jest-get-type": "^29.6.3",
-        "leven": "^3.1.0",
-        "pretty-format": "^29.7.0"
+      "engines": {
+        "node": ">=16"
       },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/lint-staged/node_modules/human-signals": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz",
+      "integrity": "sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==",
+      "dev": true,
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=16.17.0"
       }
     },
-    "node_modules/jest-validate/node_modules/camelcase": {
-      "version": "6.3.0",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
-      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
+    "node_modules/lint-staged/node_modules/is-stream": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
+      "integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
       "dev": true,
       "engines": {
-        "node": ">=10"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/jest-watcher": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
-      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
+    "node_modules/lint-staged/node_modules/mimic-fn": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
+      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
       "dev": true,
-      "dependencies": {
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.0.0",
-        "emittery": "^0.13.1",
-        "jest-util": "^29.7.0",
-        "string-length": "^4.0.1"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/jest-worker": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
-      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
+    "node_modules/lint-staged/node_modules/npm-run-path": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz",
+      "integrity": "sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==",
       "dev": true,
       "dependencies": {
-        "@types/node": "*",
-        "jest-util": "^29.7.0",
-        "merge-stream": "^2.0.0",
-        "supports-color": "^8.0.0"
+        "path-key": "^4.0.0"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/jest-worker/node_modules/supports-color": {
-      "version": "8.1.1",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
-      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
+    "node_modules/lint-staged/node_modules/onetime": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
+      "integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
       "dev": true,
       "dependencies": {
-        "has-flag": "^4.0.0"
+        "mimic-fn": "^4.0.0"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">=12"
       },
       "funding": {
-        "url": "https://github.com/chalk/supports-color?sponsor=1"
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/js-tokens": {
+    "node_modules/lint-staged/node_modules/path-key": {
       "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
-      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-      "dev": true
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
+      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
-    "node_modules/js-yaml": {
+    "node_modules/lint-staged/node_modules/signal-exit": {
       "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
-      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
       "dev": true,
-      "dependencies": {
-        "argparse": "^2.0.1"
+      "engines": {
+        "node": ">=14"
       },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/jsesc": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
-      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+    "node_modules/lint-staged/node_modules/strip-final-newline": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
+      "integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
       "dev": true,
-      "bin": {
-        "jsesc": "bin/jsesc"
-      },
       "engines": {
-        "node": ">=6"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/json-buffer": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
-      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
-      "dev": true
-    },
-    "node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
-    },
-    "node_modules/json-schema-traverse": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
-      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true
-    },
-    "node_modules/json-stable-stringify-without-jsonify": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
-      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
-      "dev": true
-    },
-    "node_modules/json5": {
-      "version": "2.2.3",
-      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
-      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+    "node_modules/lint-staged/node_modules/yaml": {
+      "version": "2.6.1",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.6.1.tgz",
+      "integrity": "sha512-7r0XPzioN/Q9kXBro/XPnA6kznR73DHq+GXh5ON7ZozRO6aMjbmiBuKste2wslTFkC5d1dw0GooOCepZXJ2SAg==",
       "dev": true,
       "bin": {
-        "json5": "lib/cli.js"
+        "yaml": "bin.mjs"
       },
       "engines": {
-        "node": ">=6"
+        "node": ">= 14"
       }
     },
-    "node_modules/jsonwebtoken": {
-      "version": "9.0.2",
-      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
-      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+    "node_modules/listr2": {
+      "version": "8.2.5",
+      "resolved": "https://registry.npmjs.org/listr2/-/listr2-8.2.5.tgz",
+      "integrity": "sha512-iyAZCeyD+c1gPyE9qpFu8af0Y+MRtmKOncdGoA2S5EY8iFq99dmmvkNnHiWo+pj0s7yH7l3KPIgee77tKpXPWQ==",
+      "dev": true,
       "dependencies": {
-        "jws": "^3.2.2",
-        "lodash.includes": "^4.3.0",
-        "lodash.isboolean": "^3.0.3",
-        "lodash.isinteger": "^4.0.4",
-        "lodash.isnumber": "^3.0.3",
-        "lodash.isplainobject": "^4.0.6",
-        "lodash.isstring": "^4.0.1",
-        "lodash.once": "^4.0.0",
-        "ms": "^2.1.1",
-        "semver": "^7.5.4"
+        "cli-truncate": "^4.0.0",
+        "colorette": "^2.0.20",
+        "eventemitter3": "^5.0.1",
+        "log-update": "^6.1.0",
+        "rfdc": "^1.4.1",
+        "wrap-ansi": "^9.0.0"
       },
       "engines": {
-        "node": ">=12",
-        "npm": ">=6"
+        "node": ">=18.0.0"
       }
     },
-    "node_modules/jsonwebtoken/node_modules/semver": {
-      "version": "7.6.3",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
-      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
+    "node_modules/listr2/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
       "engines": {
-        "node": ">=10"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
       }
     },
-    "node_modules/jwa": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
-      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
-      "dependencies": {
-        "buffer-equal-constant-time": "1.0.1",
-        "ecdsa-sig-formatter": "1.0.11",
-        "safe-buffer": "^5.0.1"
+    "node_modules/listr2/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/jws": {
-      "version": "3.2.2",
-      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
-      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
-      "dependencies": {
-        "jwa": "^1.4.1",
-        "safe-buffer": "^5.0.1"
-      }
+    "node_modules/listr2/node_modules/emoji-regex": {
+      "version": "10.4.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
+      "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
+      "dev": true
     },
-    "node_modules/keyv": {
-      "version": "4.5.4",
-      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
-      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+    "node_modules/listr2/node_modules/string-width": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
+      "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
       "dev": true,
       "dependencies": {
-        "json-buffer": "3.0.1"
-      }
-    },
-    "node_modules/kleur": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
-      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
-      "dev": true,
+        "emoji-regex": "^10.3.0",
+        "get-east-asian-width": "^1.0.0",
+        "strip-ansi": "^7.1.0"
+      },
       "engines": {
-        "node": ">=6"
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/kuler": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
-      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A=="
-    },
-    "node_modules/leven": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
-      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
+    "node_modules/listr2/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
       "dev": true,
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
       "engines": {
-        "node": ">=6"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
       }
     },
-    "node_modules/levn": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
-      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+    "node_modules/listr2/node_modules/wrap-ansi": {
+      "version": "9.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
+      "integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
       "dev": true,
       "dependencies": {
-        "prelude-ls": "^1.2.1",
-        "type-check": "~0.4.0"
+        "ansi-styles": "^6.2.1",
+        "string-width": "^7.0.0",
+        "strip-ansi": "^7.1.0"
       },
       "engines": {
-        "node": ">= 0.8.0"
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
-    "node_modules/lines-and-columns": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "dev": true
-    },
     "node_modules/locate-path": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
@@ -4894,6 +6251,17 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/lodash.camelcase": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
+      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
+      "dev": true
+    },
+    "node_modules/lodash.get": {
+      "version": "4.4.2",
+      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
+      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ=="
+    },
     "node_modules/lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
@@ -4904,6 +6272,11 @@
       "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
       "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg=="
     },
+    "node_modules/lodash.isequal": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
+      "integrity": "sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ=="
+    },
     "node_modules/lodash.isinteger": {
       "version": "4.0.4",
       "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
@@ -4924,22 +6297,201 @@
       "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
       "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
     },
+    "node_modules/lodash.kebabcase": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.kebabcase/-/lodash.kebabcase-4.1.1.tgz",
+      "integrity": "sha512-N8XRTIMMqqDgSy4VLKPnJ/+hpGZN+PHQiJnSenYqPaVV/NCqEogTnAdZLQiGKhxX+JCs8waWq2t1XHWKOmlY8g==",
+      "dev": true
+    },
     "node_modules/lodash.memoize": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
       "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
       "dev": true
     },
-    "node_modules/lodash.merge": {
-      "version": "4.6.2",
-      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true
+    },
+    "node_modules/lodash.mergewith": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.mergewith/-/lodash.mergewith-4.6.2.tgz",
+      "integrity": "sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ=="
+    },
+    "node_modules/lodash.once": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
+    },
+    "node_modules/lodash.snakecase": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.snakecase/-/lodash.snakecase-4.1.1.tgz",
+      "integrity": "sha512-QZ1d4xoBHYUeuouhEq3lk3Uq7ldgyFXGBhg04+oRLnIz8o9T65Eh+8YdroUwn846zchkA9yDsDl5CVVaV2nqYw==",
+      "dev": true
+    },
+    "node_modules/lodash.startcase": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/lodash.startcase/-/lodash.startcase-4.4.0.tgz",
+      "integrity": "sha512-+WKqsK294HMSc2jEbNgpHpd0JfIBhp7rEV4aqXWqFr6AlXov+SlcgB1Fv01y2kGe3Gc8nMW7VA0SrGuSkRfIEg==",
+      "dev": true
+    },
+    "node_modules/lodash.uniq": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
+      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==",
+      "dev": true
+    },
+    "node_modules/lodash.upperfirst": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/lodash.upperfirst/-/lodash.upperfirst-4.3.1.tgz",
+      "integrity": "sha512-sReKOYJIJf74dhJONhU4e0/shzi1trVbSWDOhKYE5XV2O+H7Sb2Dihwuc7xWxVl+DgFPyTqIN3zMfT9cq5iWDg==",
+      "dev": true
+    },
+    "node_modules/log-update": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/log-update/-/log-update-6.1.0.tgz",
+      "integrity": "sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==",
+      "dev": true,
+      "dependencies": {
+        "ansi-escapes": "^7.0.0",
+        "cli-cursor": "^5.0.0",
+        "slice-ansi": "^7.1.0",
+        "strip-ansi": "^7.1.0",
+        "wrap-ansi": "^9.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/log-update/node_modules/ansi-escapes": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz",
+      "integrity": "sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==",
+      "dev": true,
+      "dependencies": {
+        "environment": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/log-update/node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/log-update/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/log-update/node_modules/emoji-regex": {
+      "version": "10.4.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
+      "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
+      "dev": true
+    },
+    "node_modules/log-update/node_modules/is-fullwidth-code-point": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz",
+      "integrity": "sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==",
+      "dev": true,
+      "dependencies": {
+        "get-east-asian-width": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/log-update/node_modules/slice-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz",
+      "integrity": "sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^6.2.1",
+        "is-fullwidth-code-point": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
+      }
+    },
+    "node_modules/log-update/node_modules/string-width": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
+      "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
+      "dev": true,
+      "dependencies": {
+        "emoji-regex": "^10.3.0",
+        "get-east-asian-width": "^1.0.0",
+        "strip-ansi": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
-    "node_modules/lodash.once": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
-      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
+    "node_modules/log-update/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/log-update/node_modules/wrap-ansi": {
+      "version": "9.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
+      "integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^6.2.1",
+        "string-width": "^7.0.0",
+        "strip-ansi": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
     },
     "node_modules/logform": {
       "version": "2.7.0",
@@ -5024,6 +6576,18 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/meow": {
+      "version": "12.1.1",
+      "resolved": "https://registry.npmjs.org/meow/-/meow-12.1.1.tgz",
+      "integrity": "sha512-BhXM0Au22RwUneMPwSCnyhTOizdWoIEPU9sp0Aqa1PnDMR5Wv2FGXYDjuzJEIX+Eo2Rb8xuYe5jrnm5QowQFkw==",
+      "dev": true,
+      "engines": {
+        "node": ">=16.10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/merge-descriptors": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
@@ -5107,6 +6671,18 @@
         "node": ">=6"
       }
     },
+    "node_modules/mimic-function": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz",
+      "integrity": "sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==",
+      "dev": true,
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/minimatch": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
@@ -5337,6 +6913,12 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/openapi-types": {
+      "version": "12.1.3",
+      "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
+      "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
+      "peer": true
+    },
     "node_modules/optionator": {
       "version": "0.9.4",
       "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
@@ -5486,6 +7068,18 @@
         "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
+    "node_modules/pidtree": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.6.0.tgz",
+      "integrity": "sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==",
+      "dev": true,
+      "bin": {
+        "pidtree": "bin/pidtree.js"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
     "node_modules/pirates": {
       "version": "4.0.6",
       "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
@@ -5786,6 +7380,21 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/require-from-string": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
+      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/require-main-filename": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
+      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
+      "dev": true
+    },
     "node_modules/resolve": {
       "version": "1.22.9",
       "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.9.tgz",
@@ -5842,6 +7451,49 @@
         "node": ">=10"
       }
     },
+    "node_modules/restore-cursor": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz",
+      "integrity": "sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==",
+      "dev": true,
+      "dependencies": {
+        "onetime": "^7.0.0",
+        "signal-exit": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/restore-cursor/node_modules/onetime": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz",
+      "integrity": "sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==",
+      "dev": true,
+      "dependencies": {
+        "mimic-function": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/restore-cursor/node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "dev": true,
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/reusify": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
@@ -5852,6 +7504,12 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/rfdc": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz",
+      "integrity": "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==",
+      "dev": true
+    },
     "node_modules/rimraf": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
@@ -6121,6 +7779,46 @@
         "node": ">=8"
       }
     },
+    "node_modules/slice-ansi": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
+      "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^6.0.0",
+        "is-fullwidth-code-point": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
+      }
+    },
+    "node_modules/slice-ansi/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
+      "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/source-map": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
@@ -6140,6 +7838,15 @@
         "source-map": "^0.6.0"
       }
     },
+    "node_modules/split2": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
+      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
+      "dev": true,
+      "engines": {
+        "node": ">= 10.x"
+      }
+    },
     "node_modules/sprintf-js": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
@@ -6191,6 +7898,15 @@
         "safe-buffer": "~5.2.0"
       }
     },
+    "node_modules/string-argv": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz",
+      "integrity": "sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.6.19"
+      }
+    },
     "node_modules/string-length": {
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
@@ -6327,6 +8043,93 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/swagger-cli": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/swagger-cli/-/swagger-cli-4.0.4.tgz",
+      "integrity": "sha512-Cp8YYuLny3RJFQ4CvOBTaqmOOgYsem52dPx1xM5S4EUWFblIh2Q8atppMZvXKUr1e9xH5RwipYpmdUzdPcxWcA==",
+      "dev": true,
+      "dependencies": {
+        "@apidevtools/swagger-cli": "4.0.4"
+      },
+      "bin": {
+        "swagger-cli": "swagger-cli.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/swagger-jsdoc": {
+      "version": "6.2.8",
+      "resolved": "https://registry.npmjs.org/swagger-jsdoc/-/swagger-jsdoc-6.2.8.tgz",
+      "integrity": "sha512-VPvil1+JRpmJ55CgAtn8DIcpBs0bL5L3q5bVQvF4tAW/k/9JYSj7dCpaYCAv5rufe0vcCbBRQXGvzpkWjvLklQ==",
+      "dependencies": {
+        "commander": "6.2.0",
+        "doctrine": "3.0.0",
+        "glob": "7.1.6",
+        "lodash.mergewith": "^4.6.2",
+        "swagger-parser": "^10.0.3",
+        "yaml": "2.0.0-1"
+      },
+      "bin": {
+        "swagger-jsdoc": "bin/swagger-jsdoc.js"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
+    "node_modules/swagger-jsdoc/node_modules/glob": {
+      "version": "7.1.6",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
+      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.0.4",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/swagger-parser": {
+      "version": "10.0.3",
+      "resolved": "https://registry.npmjs.org/swagger-parser/-/swagger-parser-10.0.3.tgz",
+      "integrity": "sha512-nF7oMeL4KypldrQhac8RyHerJeGPD1p2xDh900GPvc+Nk7nWP6jX2FcC7WmkinMoAmoO774+AFXcWsW8gMWEIg==",
+      "dependencies": {
+        "@apidevtools/swagger-parser": "10.0.3"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/swagger-ui-dist": {
+      "version": "5.18.2",
+      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.18.2.tgz",
+      "integrity": "sha512-J+y4mCw/zXh1FOj5wGJvnAajq6XgHOyywsa9yITmwxIlJbMqITq3gYRZHaeqLVH/eV/HOPphE6NjF+nbSNC5Zw==",
+      "dependencies": {
+        "@scarf/scarf": "=1.4.0"
+      }
+    },
+    "node_modules/swagger-ui-express": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-5.0.1.tgz",
+      "integrity": "sha512-SrNU3RiBGTLLmFU8GIJdOdanJTl4TOmT27tt3bWWHppqYmAZ6IDuEuBvMU6nZq0zLEe6b/1rACXCgLZqO6ZfrA==",
+      "dependencies": {
+        "swagger-ui-dist": ">=5.0.0"
+      },
+      "engines": {
+        "node": ">= v0.10.32"
+      },
+      "peerDependencies": {
+        "express": ">=4.0.0 || >=5.0.0-beta"
+      }
+    },
     "node_modules/synckit": {
       "version": "0.9.2",
       "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.9.2.tgz",
@@ -6378,11 +8181,35 @@
         "node": ">=8"
       }
     },
+    "node_modules/text-extensions": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/text-extensions/-/text-extensions-2.4.0.tgz",
+      "integrity": "sha512-te/NtwBwfiNRLf9Ijqx3T0nlqZiQ2XrrtBvu+cLL8ZRrGkO0NHTug8MYFKyoSrv/sHTaSKfilUkizV6XhxMJ3g==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/text-hex": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
       "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg=="
     },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==",
+      "dev": true
+    },
+    "node_modules/tinyexec": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.1.tgz",
+      "integrity": "sha512-WiCJLEECkO18gwqIp6+hJg0//p23HXp4S+gGtAKu3mI2F2/sXC4FvHvXvB0zJVVaTPhx1/tOwdbRsa1sOBIKqQ==",
+      "dev": true
+    },
     "node_modules/tmpl": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
@@ -6701,11 +8528,44 @@
         "node": ">=14.17"
       }
     },
+    "node_modules/typescript-eslint": {
+      "version": "8.18.1",
+      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.18.1.tgz",
+      "integrity": "sha512-Mlaw6yxuaDEPQvb/2Qwu3/TfgeBHy9iTJ3mTwe7OvpPmF6KPQjVOfGyEJpPv6Ez2C34OODChhXrzYw/9phI0MQ==",
+      "dev": true,
+      "dependencies": {
+        "@typescript-eslint/eslint-plugin": "8.18.1",
+        "@typescript-eslint/parser": "8.18.1",
+        "@typescript-eslint/utils": "8.18.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.8.0"
+      }
+    },
     "node_modules/undici-types": {
       "version": "6.20.0",
       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
-      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
-      "dev": true
+      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg=="
+    },
+    "node_modules/unicorn-magic": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/unicorn-magic/-/unicorn-magic-0.1.0.tgz",
+      "integrity": "sha512-lRfVq8fE8gz6QMBuDM6a+LO3IAzTi05H6gCVaUpir2E1Rwpo4ZUog45KpNXKC/Mn3Yb9UDuHumeFTo9iV/D9FQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
     "node_modules/unpipe": {
       "version": "1.0.0",
@@ -6787,6 +8647,14 @@
         "node": ">=10.12.0"
       }
     },
+    "node_modules/validator": {
+      "version": "13.12.0",
+      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
+      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
     "node_modules/vary": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
@@ -6833,6 +8701,12 @@
         "node": ">= 8"
       }
     },
+    "node_modules/which-module": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
+      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==",
+      "dev": true
+    },
     "node_modules/wide-align": {
       "version": "1.1.5",
       "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
@@ -6943,6 +8817,14 @@
       "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
       "dev": true
     },
+    "node_modules/yaml": {
+      "version": "2.0.0-1",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.0.0-1.tgz",
+      "integrity": "sha512-W7h5dEhywMKenDJh2iX/LABkbFnBxasD27oyXWDS/feDsxiw0dD5ncXdYXgkvAsXIY2MpW/ZKkr9IU30DBdMNQ==",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/yargs": {
       "version": "17.7.2",
       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
@@ -6991,6 +8873,34 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/z-schema": {
+      "version": "5.0.5",
+      "resolved": "https://registry.npmjs.org/z-schema/-/z-schema-5.0.5.tgz",
+      "integrity": "sha512-D7eujBWkLa3p2sIpJA0d1pr7es+a7m0vFAnZLlCEKq/Ij2k0MLi9Br2UPxoxdYystm5K1yeBGzub0FlYUEWj2Q==",
+      "dependencies": {
+        "lodash.get": "^4.4.2",
+        "lodash.isequal": "^4.5.0",
+        "validator": "^13.7.0"
+      },
+      "bin": {
+        "z-schema": "bin/z-schema"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      },
+      "optionalDependencies": {
+        "commander": "^9.4.1"
+      }
+    },
+    "node_modules/z-schema/node_modules/commander": {
+      "version": "9.5.0",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
+      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
+      "optional": true,
+      "engines": {
+        "node": "^12.20.0 || >=14"
+      }
+    },
     "node_modules/zod": {
       "version": "3.24.1",
       "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.1.tgz",
diff --git a/package.json b/package.json
index 491c7c6..b2e1415 100644
--- a/package.json
+++ b/package.json
@@ -4,10 +4,14 @@
   "description": "API endpoint to interact with tutortrove.com and platform",
   "main": "index.ts",
   "scripts": {
-    "test": "jest",
+    "test": "jest --detectOpenHandles --forceExit",
     "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
     "build": "tsc -p .",
-    "start": "node dist/index.js"
+    "start": "node dist/index.js",
+    "lint": "eslint",
+    "lint:all": "eslint .",
+    "format": "prettier --write ",
+    "check-format": "prettier ."
   },
   "repository": {
     "type": "git",
@@ -27,6 +31,9 @@
   },
   "homepage": "https://github.com/tutortrove/funston-backend#readme",
   "devDependencies": {
+    "@commitlint/cli": "^19.6.1",
+    "@commitlint/config-conventional": "^19.6.0",
+    "@eslint/js": "^9.17.0",
     "@types/bcrypt": "^5.0.2",
     "@types/cors": "^2.8.17",
     "@types/express": "^5.0.0",
@@ -38,24 +45,33 @@
     "eslint": "^9.17.0",
     "eslint-config-prettier": "^9.1.0",
     "eslint-plugin-prettier": "^5.2.1",
+    "globals": "^15.14.0",
+    "husky": "^9.1.7",
     "jest": "^29.7.0",
     "jest-mock-extended": "^4.0.0-beta1",
+    "lint-staged": "^15.2.11",
     "prettier": "^3.4.2",
     "prisma": "^6.1.0",
     "supertest": "^7.0.0",
+    "swagger-cli": "^4.0.4",
     "ts-jest": "^29.2.5",
     "ts-node": "^10.9.2",
     "ts-node-dev": "^2.0.0",
-    "typescript": "^5.7.2"
+    "typescript": "^5.7.2",
+    "typescript-eslint": "^8.18.1"
   },
   "dependencies": {
     "@prisma/client": "^6.1.0",
+    "@types/swagger-jsdoc": "^6.0.4",
+    "@types/swagger-ui-express": "^4.1.7",
     "bcrypt": "^5.1.1",
     "cors": "^2.8.5",
     "express": "^4.21.2",
     "express-rate-limit": "^7.5.0",
     "helmet": "^8.0.0",
     "jsonwebtoken": "^9.0.2",
+    "swagger-jsdoc": "^6.2.8",
+    "swagger-ui-express": "^5.0.1",
     "winston": "^3.17.0",
     "zod": "^3.24.1"
   }
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
new file mode 100644
index 0000000..b5ee5f2
--- /dev/null
+++ b/prisma/schema.prisma
@@ -0,0 +1,1241 @@
+generator client {
+  provider = "prisma-client-js"
+}
+
+datasource db {
+  provider = "mysql"
+  url      = env("DATABASE_URL")
+}
+
+model addresses {
+  id                Int     @id @default(autoincrement())
+  client_account_id Int?
+  user_id           Int?
+  credit_card_id    Int?
+  address1          String? @db.VarChar(255)
+  address2          String? @db.VarChar(255)
+  city              String? @db.VarChar(255)
+  state             String? @db.VarChar(255)
+  zip               String? @db.VarChar(255)
+  country           String? @db.VarChar(255)
+  name              String? @db.VarChar(255)
+  description       String? @db.Text
+  is_primary        Int?
+  is_private        Int?
+  franchise_id      Int?
+
+  @@index([client_account_id], map: "client_account_id")
+  @@index([franchise_id], map: "franchise_id")
+}
+
+model api_keys {
+  id           Int     @id @default(autoincrement())
+  public_key   String? @db.VarChar(255)
+  private_key  String? @db.VarChar(255)
+  franchise_id Int?
+}
+
+model cell_carriers {
+  id    Int     @id @default(autoincrement())
+  name  String? @db.VarChar(255)
+  email String? @db.VarChar(255)
+}
+
+model change_tracking {
+  id           Int     @id @default(autoincrement())
+  session_id   Int?
+  action       String? @db.VarChar(255)
+  user_id      Int?
+  fields       String? @db.Text
+  time         Int?
+  franchise_id Int?
+  parent_id    Int?
+  page_url     String? @db.VarChar(255)
+  version      String? @db.VarChar(255)
+
+  @@index([franchise_id], map: "franchise_id")
+  @@index([time], map: "time")
+}
+
+model chat_uses {
+  id                   Int  @id @default(autoincrement())
+  users_whiteboards_id Int?
+  start_time           Int?
+  closed               Int?
+  last_check           Int?
+  conversation_id      Int?
+  user_id              Int?
+  franchise_id         Int?
+}
+
+model chats {
+  id                   Int     @id @default(autoincrement())
+  name                 String? @db.VarChar(255)
+  message              String? @db.VarChar(255)
+  conversation_id      Int?
+  time                 Int?
+  special_action       String? @db.VarChar(255)
+  users_whiteboards_id Int?
+  user_id              Int?
+  type                 String? @db.VarChar(255)
+  hash                 String? @db.VarChar(255)
+  closed               Int?
+  session_use_id       String? @db.VarChar(255)
+  franchise_id         Int?
+
+  @@index([conversation_id], map: "conversation_id")
+  @@index([hash], map: "hash")
+  @@index([user_id], map: "user_id")
+}
+
+model client_accounts {
+  id                 Int     @id @default(autoincrement())
+  name               String? @db.VarChar(255)
+  export_name        String? @db.VarChar(255)
+  pricing_type       String? @default("per_hour") @db.VarChar(255)
+  price_bracket_id   Int?
+  franchise_id       Int?
+  created            Int?
+  modified           Int?
+  address1           String? @db.VarChar(255)
+  address2           String? @db.VarChar(255)
+  city               String? @db.VarChar(255)
+  state              String? @db.VarChar(255)
+  zip                String? @db.VarChar(255)
+  phone              String? @db.VarChar(255)
+  description        String? @db.Text
+  balance            Float   @default(0) @db.Float
+  application_time   Int?
+  balance_adjustment Float?  @db.Float
+  imported           Int?
+
+  @@index([franchise_id], map: "franchise_id")
+}
+
+model client_balances {
+  id                            Int     @id @default(autoincrement())
+  user_id                       Int?
+  transaction_type              String? @db.VarChar(255)
+  amount                        Float?  @db.Float
+  starting_balance              Float?  @db.Float
+  ending_balance                Float?  @db.Float
+  time                          Int?
+  paypal_transaction_id         Int?
+  googlecheckout_transaction_id Int?
+  credit_card_id                Int?
+  session_id                    Int?
+  should_export                 Int?    @default(1)
+  description                   String? @db.VarChar(255)
+  client_account_id             Int?
+  braintree_transaction_id      Int?
+  payment_id                    Int?
+  deleted                       Int?
+  deleted_by                    Int?
+  unlinked_session              Int?
+  franchise_id                  Int?
+  marked                        Int?
+
+  @@index([client_account_id], map: "client_account_id")
+  @@index([franchise_id], map: "franchise_id")
+  @@index([session_id], map: "session_id")
+}
+
+model credit_cards {
+  id                 Int     @id @default(autoincrement())
+  firstname          String? @db.VarChar(255)
+  cc_number          String? @db.VarChar(255)
+  braintree_vault_id String? @db.VarChar(255)
+  user_id            Int?
+  franchise_id       Int?
+  is_default         Int?    @default(1)
+  lastname           String? @db.VarChar(255)
+  ccexp              String? @db.VarChar(255)
+  token              String? @db.VarChar(255)
+  cc_month           String? @db.VarChar(255)
+  cc_year            String? @db.VarChar(255)
+  type               String? @db.VarChar(255)
+  last4              String? @db.VarChar(255)
+  vendor             String? @db.VarChar(255)
+  zip                String? @db.VarChar(255)
+  customerId         String? @db.VarChar(255)
+  environment        String? @db.VarChar(255)
+}
+
+model currencies {
+  id      Int     @id @default(autoincrement())
+  title   String? @db.VarChar(255)
+  pp_name String? @db.VarChar(255)
+  symbol  String? @default("$") @db.VarChar(255)
+}
+
+model custom_exports {
+  id           Int     @id @default(autoincrement())
+  franchise_id Int?
+  title        String? @db.VarChar(255)
+  url          String? @db.VarChar(255)
+  new_window   Int?
+}
+
+model custom_fields {
+  id                  Int     @id @default(autoincrement())
+  franchise_id        Int?
+  title               String? @db.VarChar(255)
+  table_name          String? @db.VarChar(255)
+  applies_to          String? @db.VarChar(255)
+  type                String? @default("default") @db.VarChar(255)
+  options             String? @db.VarChar(255)
+  default_value       String? @db.VarChar(255)
+  show_in_search      Int?
+  review_template_id  Int?
+  rows                Int?    @default(5)
+  visible_to_tutors   Int?
+  visible_to_students Int?
+  description         String? @db.VarChar(255)
+  required            Int?
+  order_num           Int?
+  visible_to_parents  Int?
+  applies_to_student  Int?
+  applies_to_tutor    Int?
+  applies_to_parent   Int?
+  each_student        Int?    @default(1)
+}
+
+model custom_values {
+  id              Int     @id @default(autoincrement())
+  custom_field_id Int?
+  user_id         Int?
+  value           String? @db.Text
+  service_id      Int?
+  session_id      Int?
+  franchise_id    Int?
+
+  @@index([custom_field_id], map: "custom_field_id")
+  @@index([session_id], map: "session_id")
+  @@index([user_id], map: "user_id")
+}
+
+model emails {
+  id             Int     @id @default(autoincrement())
+  subject        String? @db.VarChar(255)
+  body           String? @db.Text
+  headers        String? @db.VarChar(255)
+  address        String? @db.VarChar(255)
+  user_id        Int?
+  time           Int?
+  html_content   String? @db.Text
+  normal_content String? @db.Text
+  franchise_id   Int?
+  type           String? @db.VarChar(255)
+}
+
+model firm_signups {
+  id              Int     @id @default(autoincrement())
+  contact_name    String? @db.VarChar(255)
+  contact_email   String? @db.VarChar(255)
+  subdomain       String? @db.VarChar(255)
+  company_name    String? @db.VarChar(255)
+  company_website String? @db.VarChar(255)
+  time            Int?
+  how_heard       String? @db.Text
+}
+
+model franchise_email_settings {
+  id                       Int     @id @default(autoincrement())
+  franchise_id             Int?
+  from_email               String? @default("info@tutortrove.com") @db.VarChar(255)
+  replyto_email            String? @default("info@tutortrove.com") @db.VarChar(255)
+  bcc_email                String? @default("eli.luberoff@gmail.com") @db.VarChar(255)
+  default_send_invite      Int?    @default(1)
+  bcc_invite               Int?    @default(1)
+  bcc_messages             Int?
+  bcc_forgotten_password   Int?    @default(1)
+  bcc_payment_confirmation Int?    @default(1)
+}
+
+model franchise_layouts {
+  id           Int    @id @default(autoincrement())
+  code         Bytes? @db.Blob
+  franchise_id Int?
+}
+
+model franchise_pages {
+  id                  Int     @id @default(autoincrement())
+  franchise_id        Int?
+  page                String? @db.VarChar(255)
+  title               String? @db.VarChar(255)
+  content             String? @db.LongText
+  description         String? @db.Text
+  keywords            String? @db.Text
+  is_default          Int?
+  franchise_layout_id Int?
+  cstfld1             String? @db.VarChar(255)
+  cstfld2             String? @db.VarChar(255)
+}
+
+model franchise_payment_settings {
+  id                          Int     @id @default(autoincrement())
+  braintree_environment       String? @default("production") @db.VarChar(255)
+  braintree_merchantId        String? @db.VarChar(255)
+  braintree_publicKey         String? @db.VarChar(255)
+  braintree_privateKey        String? @db.VarChar(255)
+  braintree_enabled           Int?
+  paypal_email                String? @db.VarChar(255)
+  paypal_enabled              Int?
+  googlecheckout_merchant_id  String? @db.VarChar(255)
+  googlecheckout_merchant_key String? @db.VarChar(255)
+  googlecheckout_enabled      Int?
+  franchise_id                Int?
+  paypal_currency_code        String? @default("USD") @db.VarChar(255)
+}
+
+model franchise_permissions {
+  id                             Int     @id @default(autoincrement())
+  franchise_id                   Int?
+  tutors_can_schedule            Int?    @default(1)
+  tutors_can_see_client_contact  Int?
+  tutors_can_see_other_tutors    Int?
+  tutors_can_see_other_calendars Int?
+  clients_can_register           Int?
+  clients_need_to_be_confirmed   Int?
+  tutors_can_see_client_history  Int?
+  tutors_can_search_all_students Int?
+  tutors_can_see_tutor_contact   Int?
+  parents_can_view_balances      Boolean @default(true)
+}
+
+model franchises {
+  id                        Int     @id @default(autoincrement())
+  name                      String? @db.VarChar(255)
+  title                     String? @db.VarChar(255)
+  logo_src                  String? @default("placeholder_logo.png") @db.VarChar(255)
+  skin_id                   Int?    @default(2)
+  logo_width                Int?    @default(304)
+  logo_height               Int?    @default(84)
+  contact_email             String? @db.VarChar(255)
+  API_key                   String? @db.VarChar(255)
+  app_secret                String? @db.VarChar(255)
+  facebook_url              String? @db.VarChar(255)
+  favicon                   String? @default("placeholder_favicon.png") @db.VarChar(255)
+  force_move                Int?    @default(1)
+  header_bg_color           String? @db.VarChar(255)
+  header_bottom_padding     Int?
+  facebook_enabled          Int?
+  subdomain                 String? @db.VarChar(255)
+  host                      String? @db.VarChar(255)
+  from_email                String? @default("noreply@tutortrove.com") @db.VarChar(255)
+  bcc_email                 String? @default("eli.luberoff@gmail.com") @db.VarChar(255)
+  default_timezone          String? @default("America/New_York") @db.VarChar(255)
+  service_level             Int?    @default(6)
+  currency                  String? @db.VarChar(255)
+  results_per_page          Int?    @default(30)
+  order_users_by            String? @default("last") @db.VarChar(255)
+  locations_enabled         Int?    @default(1)
+  pricing_enabled           Int?
+  billpay_enabled           Int?
+  quickbooks_enabled        Int?
+  force_https               Int?
+  custom_fields_enabled     Int?
+  balance                   Float?  @db.Float
+  html_mail_header          String? @db.Text
+  html_mail_footer          String? @db.Text
+  private_key               String? @db.VarChar(255)
+  callback_url              String? @db.VarChar(255)
+  order_tutors_by           String? @default("first") @db.VarChar(255)
+  normal_mail_footer        String? @db.Text
+  key_id                    Int?
+  is_active                 Int?    @default(1)
+  messaging_enabled         Int?    @default(1)
+  use_host                  Int?
+  hide_tt_branding          Int?
+  home_website              String? @db.VarChar(255)
+  show_export_button        Int?
+  show_wb_audio             Int?
+  show_wb_video             Int?
+  show_download_button      Int?
+  franchise_webroot         String? @db.VarChar(255)
+  show_print_button         Int?    @default(1)
+  default_timesheet_view    String? @default("week") @db.VarChar(255)
+  tutor_dashboard_events    String? @default("day") @db.VarChar(255)
+  asset_franchise_parent_id Int?
+  sso_enabled               Int?
+  is_developer              Int?
+  whiteboard_left_offset    Int?
+  fixed_width_whiteboard    Int?
+  olark_enabled             Int?
+  custom_help_page          String? @db.VarChar(255)
+  apple_homescreen_icon     String? @db.VarChar(255)
+  email_reviews             Int?
+  locale                    String  @default("en_US.utf8") @db.VarChar(11)
+  rtmp_servers_id           Int     @default(7)
+  time_increments           Int     @default(900) @db.SmallInt
+
+  @@index([rtmp_servers_id], map: "fk_franchises_rtmp_servers_idx")
+  @@index([host], map: "host_idx")
+  @@index([subdomain], map: "subdomain_idx")
+}
+
+model handouts {
+  id           Int     @id @default(autoincrement())
+  title        String? @db.VarChar(255)
+  status       String? @default("draft") @db.VarChar(255)
+  description  String? @db.VarChar(255)
+  version      Int?    @default(1)
+  user_id      Int?
+  franchise_id Int?
+  hash         String? @db.VarChar(255)
+}
+
+model lead_contacts {
+  id      Int     @id @default(autoincrement())
+  name    String? @db.VarChar(255)
+  email   String? @db.VarChar(255)
+  phone1  String? @db.VarChar(255)
+  phone2  String? @db.VarChar(255)
+  title   String? @db.VarChar(255)
+  lead_id Int?
+}
+
+model lead_events {
+  id        Int     @id @default(autoincrement())
+  lead_id   String? @db.VarChar(255)
+  time      Int?
+  notes     String? @db.Text
+  completed Int?
+  title     String? @db.VarChar(255)
+}
+
+model leads {
+  id           Int     @id @default(autoincrement())
+  name         String? @db.VarChar(255)
+  address      String? @db.VarChar(255)
+  website      String? @db.VarChar(255)
+  status       String? @db.VarChar(255)
+  user_id      Int?
+  city         String? @db.VarChar(255)
+  state        String? @db.VarChar(255)
+  size         String? @db.VarChar(255)
+  referrer     String? @db.VarChar(255)
+  email        String? @db.VarChar(255)
+  phone        String? @db.VarChar(255)
+  phone2       String? @db.VarChar(255)
+  contact_name String? @db.VarChar(255)
+  type         String? @default("company") @db.VarChar(255)
+  notes        String? @db.Text
+}
+
+model locales {
+  locale_id   Int     @id @default(autoincrement()) @db.UnsignedSmallInt
+  locale_name String  @db.VarChar(100)
+  locale_code String  @unique(map: "locale_code_UNIQUE") @db.VarChar(15)
+  enabled     Boolean @default(dbgenerated("b'1'")) @db.Bit(1)
+
+  @@index([enabled], map: "enabled_idx")
+}
+
+model locations {
+  id               Int     @id @default(autoincrement())
+  name             String? @db.VarChar(255)
+  franchise_id     Int?
+  description      String? @db.Text
+  is_default       Int?
+  default_selected Int?
+  order_num        Int?
+  is_active        Int?    @default(1)
+  is_online        Int?
+}
+
+model mcgraw_files {
+  id           Int     @id @default(autoincrement())
+  name         String? @db.VarChar(255)
+  pages        Int?
+  base_path    String? @db.VarChar(255)
+  status       String? @db.VarChar(255)
+  franchise_id Int?    @default(321)
+}
+
+model memorized_rates {
+  id              Int     @id @default(autoincrement())
+  fixed           Float?  @db.Float
+  hourly          Float?  @db.Float
+  type            String? @default("price") @db.VarChar(255)
+  service_id      Int?
+  franchise_id    Int?
+  tutor_id        Int?
+  student_id      Int?
+  status_details  String? @db.VarChar(255)
+  location_id     Int?
+  service_type_id Int?
+
+  @@index([service_id, tutor_id, student_id, location_id], map: "tutor_service_rate_idx")
+}
+
+model messages {
+  id           Int     @id @default(autoincrement())
+  from_id      Int?
+  to_id        Int?
+  subject      String? @db.VarChar(255)
+  content      String? @db.Text
+  is_read      Int?
+  franchise_id Int?
+  parent_id    Int?
+  ancestor_id  Int?
+  is_seen      Int?
+  time         Int?
+  deleted      Int?
+
+  @@index([to_id, is_seen], map: "unseen_idx")
+}
+
+model mgh_locators {
+  id         Int     @id @default(autoincrement())
+  title      String? @db.VarChar(255)
+  grade      String? @db.VarChar(255)
+  asset_id   String? @db.VarChar(255)
+  media_hash String? @db.VarChar(255)
+  locator    String? @db.VarChar(255)
+  unit       Int?
+  week       Int?
+  day        String? @db.VarChar(255)
+}
+
+model newci_sessions {
+  session_id          String  @id @db.VarChar(32)
+  session_last_access Int?    @db.UnsignedInt
+  session_data        String? @db.Text
+
+  @@unique([session_id, session_last_access], map: "replace_idx")
+}
+
+model oauth_requests {
+  id          Int     @id @default(autoincrement())
+  request     String? @db.Text
+  base_string String? @db.Text
+  signature   String? @db.VarChar(255)
+  success     Int?
+}
+
+model packages {
+  id                    Int     @id @default(autoincrement())
+  db_name               String? @db.VarChar(255)
+  data                  String? @db.Text
+  width                 Int?    @default(700)
+  height                Int?    @default(500)
+  skin                  String? @default("stripped") @db.VarChar(255)
+  wb_version            String? @default("Whiteboard2.swf") @db.VarChar(255)
+  is_public             Int?
+  session_id            Int?
+  session_attachment_id Int?
+  package_version       String? @default("standalone") @db.VarChar(255)
+  help_url              String? @db.VarChar(255)
+  session_hash          String? @db.VarChar(255)
+  franchise_id          Int?
+  time                  Int?
+  save_pages_locally    String? @default("true") @db.VarChar(255)
+  is_checked            Int?
+  data_backup           String? @db.Text
+}
+
+model pages {
+  id           Int     @id @default(autoincrement())
+  name         String? @db.VarChar(255)
+  franchise_id String? @db.VarChar(255)
+  content      String? @db.Text
+}
+
+model pay_brackets {
+  id           Int     @id @default(autoincrement())
+  title        String? @db.VarChar(255)
+  franchise_id Int?
+  is_default   Int?
+}
+
+model pay_rates {
+  id              Int    @id @default(autoincrement())
+  location_id     Int?
+  subject_type_id Int?
+  franchise_id    Int?
+  per_hour        Float? @db.Float
+  fixed           Float? @db.Float
+  pay_bracket_id  Int?   @default(1)
+  labor_type_id   Int?
+  not_available   Int?
+  service_id      Int?
+}
+
+model payment_overrides {
+  id              Int     @id @default(autoincrement())
+  price           Float?  @db.Float
+  pay             Float?  @db.Float
+  tutor_id        Int?
+  student_id      Int?
+  subject_type_id Int?
+  location_id     Int?
+  status_details  String? @db.VarChar(255)
+  service_id      Int?
+  franchise_id    Int?
+}
+
+model payments {
+  id                        Int     @id @default(autoincrement())
+  amount                    Float?  @db.Float
+  user_id                   Int?
+  franchise_id              Int?
+  method                    String? @db.VarChar(255)
+  token                     String? @db.VarChar(255)
+  time                      Int?
+  status                    String? @db.VarChar(255)
+  fee                       Float?  @db.Float
+  currency                  String? @default("USD") @db.VarChar(255)
+  avs_response              String? @db.VarChar(255)
+  cvv_response              String? @db.VarChar(255)
+  gc_code                   String? @db.VarChar(255)
+  last4                     String? @db.VarChar(255)
+  name                      String? @db.VarChar(255)
+  added_to_balance          Int?
+  payer_email               String? @db.VarChar(255)
+  payment_from_franchise_id Int?
+  credit_card_id            Int?
+  my_status                 String? @db.Text
+}
+
+model phones {
+  id                Int     @id @default(autoincrement())
+  user_id           Int?
+  type              String? @db.VarChar(255)
+  cell_carrier_id   Int?
+  number            String? @db.VarChar(255)
+  client_account_id Int?
+  is_private        Int?
+  notes             String? @db.VarChar(255)
+  franchise_id      Int?
+}
+
+model preconvert_queue {
+  id              Int     @id @default(autoincrement())
+  fullrequest_url String? @db.Text
+  time            Int?
+  file_url        String? @db.VarChar(255)
+  file_token      String? @db.VarChar(255)
+}
+
+model price_brackets {
+  id           Int     @id @default(autoincrement())
+  title        String? @db.VarChar(255)
+  franchise_id Int?
+  is_default   Int?
+}
+
+model prices {
+  id                Int    @id @default(autoincrement())
+  location_id       Int?
+  subject_type_id   Int?
+  franchise_id      Int?
+  per_hour          Float? @db.Float
+  fixed             Float? @db.Float
+  price_bracket_id  Int?   @default(1)
+  client_service_id Int?
+  service_id        Int?
+}
+
+model profile_images {
+  id              Int     @id @default(autoincrement())
+  user_id         Int?
+  original_source String? @db.VarChar(255)
+  top_offset      Int?
+  left_offset     Int?
+  thumb_source    String? @db.VarChar(255)
+  width           Int?
+  height          Int?
+  image_type      String? @db.VarChar(255)
+  width_for_thumb Int?
+  franchise_id    Int?
+
+  @@index([user_id], map: "user_id")
+}
+
+model qb_cust {
+  id          Int     @id @default(autoincrement())
+  NAME        String? @db.VarChar(255)
+  TIMESTAMP   String? @db.VarChar(255)
+  REFNUM      String? @db.VarChar(255)
+  BADDR1      String? @db.VarChar(255)
+  BADDR2      String? @db.VarChar(255)
+  BADDR3      String? @db.VarChar(255)
+  BADDR4      String? @db.VarChar(255)
+  BADDR5      String? @db.VarChar(255)
+  SADDR1      String? @db.VarChar(255)
+  SADDR2      String? @db.VarChar(255)
+  SADDR3      String? @db.VarChar(255)
+  SADDR4      String? @db.VarChar(255)
+  SADDR5      String? @db.VarChar(255)
+  PHONE1      String? @db.VarChar(255)
+  PHONE2      String? @db.VarChar(255)
+  FAXNUM      String? @db.VarChar(255)
+  CONT1       String? @db.VarChar(255)
+  CONT2       String? @db.VarChar(255)
+  CTYPE       String? @db.VarChar(255)
+  TERMS       String? @db.VarChar(255)
+  TAXABLE     String? @db.VarChar(255)
+  RESALENUM   String? @db.VarChar(255)
+  REP         String? @db.VarChar(255)
+  TAXITEM     String? @db.VarChar(255)
+  NOTEPAD     String? @db.VarChar(255)
+  SALUTATION  String? @db.VarChar(255)
+  COMPANYNAME String? @db.VarChar(255)
+  FIRSTNAME   String? @db.VarChar(255)
+  MIDINIT     String? @db.VarChar(255)
+  LASTNAME    String? @db.VarChar(255)
+  CUSTFLD1    String? @db.VarChar(255)
+  CUSTFLD2    String? @db.VarChar(255)
+  CUSTFLD3    String? @db.VarChar(255)
+  CUSTFLD4    String? @db.VarChar(255)
+  CUSTFLD5    String? @db.VarChar(255)
+  CUSTFLD6    String? @db.VarChar(255)
+  CUSTFLD7    String? @db.VarChar(255)
+  JOBDESC     String? @db.VarChar(255)
+  JOBTYPE     String? @db.VarChar(255)
+  JOBSTATUS   String? @db.VarChar(255)
+  JOBSTART    String? @db.VarChar(255)
+  JOBPROJEND  String? @db.VarChar(255)
+  JOBEND      String? @db.VarChar(255)
+  NOTE        String? @db.VarChar(255)
+  LIM         String? @db.VarChar(255)
+}
+
+model qb_lines {
+  id           Int     @id @default(autoincrement())
+  franchise_id Int?    @default(2)
+  type         String? @default("spl") @db.VarChar(255)
+  field        String? @db.VarChar(255)
+  value        String? @db.VarChar(255)
+}
+
+model qb_spl {
+  id         Int     @id @default(autoincrement())
+  QB_TRNS_id String? @db.VarChar(255)
+  SPLID      String? @db.VarChar(255)
+  TRNSTYPE   String? @db.VarChar(255)
+  DATE       String? @db.VarChar(255)
+  ACCNT      String? @db.VarChar(255)
+  NAME       String? @db.VarChar(255)
+  CLASS      String? @db.VarChar(255)
+  AMOUNT     String? @db.VarChar(255)
+  DOCNUM     String? @db.VarChar(255)
+  MEMO       String? @db.VarChar(255)
+  CLEAR      String? @db.VarChar(255)
+  PRICE      String? @db.VarChar(255)
+  QNTY       String? @db.VarChar(255)
+  INVITEM    String? @db.VarChar(255)
+  PAYMETH    String? @db.VarChar(255)
+  TAXABLE    String? @db.VarChar(255)
+  REIMBEXP   String? @db.VarChar(255)
+  EXTRA      String? @db.VarChar(255)
+  VALDAJ     String? @db.VarChar(255)
+}
+
+model qb_trns {
+  id                 Int     @id @default(autoincrement())
+  TRNSID             String? @db.VarChar(255)
+  TIMESTAMP          String? @db.VarChar(255)
+  TRNSTYPE           String? @db.VarChar(255)
+  DATE               String? @db.VarChar(255)
+  ACCNT              String? @db.VarChar(255)
+  NAME               String? @db.VarChar(255)
+  CLASS              String? @db.VarChar(255)
+  AMOUNT             String? @db.VarChar(255)
+  DOCNUM             String? @db.VarChar(255)
+  MEMO               String? @db.VarChar(255)
+  CLEAR              String? @db.VarChar(255)
+  TOPRINT            String? @db.VarChar(255)
+  ADDR1              String? @db.VarChar(255)
+  ADDR2              String? @db.VarChar(255)
+  ADDR3              String? @db.VarChar(255)
+  ADDR4              String? @db.VarChar(255)
+  ADDR5              String? @db.VarChar(255)
+  DUEDATE            String? @db.VarChar(255)
+  TERMS              String? @db.VarChar(255)
+  PAID               String? @db.VarChar(255)
+  PAYMETH            String? @db.VarChar(255)
+  SHIPVIA            String? @db.VarChar(255)
+  SHIPDATE           String? @db.VarChar(255)
+  REP                String? @db.VarChar(255)
+  FOB                String? @db.VarChar(255)
+  PONUM              String? @db.VarChar(255)
+  INVTITLE           String? @db.VarChar(255)
+  INVMEMO            String? @db.VarChar(255)
+  SADDR1             String? @db.VarChar(255)
+  SADDR2             String? @db.VarChar(255)
+  SADDR3             String? @db.VarChar(255)
+  SADDR4             String? @db.VarChar(255)
+  SADDR5             String? @db.VarChar(255)
+  NAMEISTAXABLE      String? @db.VarChar(255)
+  is_primary         Int?    @default(1)
+  franchise_id       Int?
+  services_to_ignore String? @db.VarChar(255)
+  record_type        String? @default("invoice") @db.VarChar(255)
+  service_type_id    Int?    @default(2)
+}
+
+model relays {
+  id      Int     @id @default(autoincrement())
+  request String? @db.Text
+}
+
+model resource_libraries {
+  id           Int     @id @default(autoincrement())
+  title        String? @db.VarChar(255)
+  description  String? @db.Text
+  franchise_id Int?
+  is_public    Int?
+}
+
+model resources {
+  id                    Int     @id @default(autoincrement())
+  resource_library_id   Int?
+  franchise_id          Int?
+  url                   String? @db.VarChar(255)
+  session_attachment_id Int?
+  title                 String? @db.VarChar(255)
+  description           String? @db.Text
+  session_image_id      Int?
+}
+
+model review_templates {
+  id           Int     @id @default(autoincrement())
+  franchise_id Int?
+  name         String? @db.VarChar(255)
+}
+
+model rtmp_servers {
+  id         Int     @id @default(autoincrement())
+  url        String? @db.VarChar(255)
+  IP         String? @db.VarChar(255)
+  wb_version String? @db.VarChar(255)
+}
+
+/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
+model service_types {
+  id                 Int     @id @default(autoincrement())
+  title              String? @db.VarChar(255)
+  has_tutor          Int?
+  has_student        Int?
+  has_location       Int?
+  has_time           Int?
+  is_billable        Int?
+  has_duration       Int?
+  has_status_details Int?
+  has_service        Int?
+  has_pay_input      Int?
+  order_num          Int?
+  can_have_time      Int?
+  needs_review       Int?
+  name_type          String? @default("Service") @db.VarChar(255)
+  name               String? @db.VarChar(255)
+  popup_name_type    String? @db.VarChar(255)
+  force_tabs         Boolean @default(false)
+  class              String? @db.VarChar(15)
+  allows_hold        Boolean @default(false)
+}
+
+model services {
+  id                 Int     @id @default(autoincrement())
+  franchise_id       Int?
+  title              String? @db.VarChar(255)
+  service_type_id    Int?
+  is_default         Int?
+  order_num          Int?
+  is_active          Int?    @default(1)
+  review_template_id Int?
+  ignore_from_export Int?
+}
+
+model session_attachments {
+  id                      Int     @id @default(autoincrement())
+  session_use_id          Int?
+  file_url                String? @db.VarChar(255)
+  title                   String? @db.VarChar(255)
+  session_id              Int?
+  image_id                Int?
+  time                    Int?
+  user_id                 Int?
+  pdf_status              String? @db.VarChar(255)
+  pdf_hash                String? @db.VarChar(255)
+  pdf_pages               Int?
+  directory               String? @db.VarChar(255)
+  pdf_interval            Int?    @default(1)
+  pdf_startpage           Int?    @default(1)
+  pdf_is_background       Int?
+  pdf_width               Int?
+  pdf_height              Int?
+  permission              Int?
+  url                     String? @db.VarChar(255)
+  ext                     String? @db.VarChar(255)
+  is_dropbox              Int?
+  request_url             String? @db.Text
+  is_inserted             Int?
+  print_token             String? @db.VarChar(255)
+  franchise_id            Int?
+  description             String? @db.Text
+  is_public               Int?
+  pdf_conversion_complete Int?
+  preload_token           String? @db.VarChar(255)
+  callback_url            String? @db.VarChar(255)
+  pages                   String? @db.Text
+  error_callback          String? @db.VarChar(255)
+  error_nature            String? @db.VarChar(255)
+  resourced               Int?
+  version                 String? @default("1") @db.VarChar(255)
+  full_request_url        String? @db.VarChar(255)
+
+  @@index([franchise_id], map: "franchise_id")
+  @@index([is_public], map: "is_public")
+  @@index([preload_token], map: "preload_token")
+  @@index([session_id], map: "session_id")
+  @@index([title], map: "title")
+}
+
+model session_images {
+  id                          Int     @id @default(autoincrement())
+  width                       Int?
+  height                      Int?
+  session_use_id              Int?
+  url                         String? @db.VarChar(255)
+  session_id                  Int?
+  title                       String? @db.VarChar(255)
+  file_type                   String? @db.VarChar(255)
+  time                        Int?
+  whiteboard_image_library_id Int?
+  user_id                     Int?
+  ext                         String? @db.VarChar(255)
+  is_public                   Int?
+  session_attachment_id       Int?
+  page                        Int?
+  processing_complete         Int?
+  franchise_id                Int?
+  description                 String? @db.Text
+  size_updated                Int?
+  resourced                   Int?
+
+  @@index([session_attachment_id], map: "session_attachment_id")
+  @@index([session_id], map: "session_id_idx")
+  @@index([url], map: "url_idx")
+  @@index([whiteboard_image_library_id], map: "whiteboard_image_library_id")
+}
+
+model session_summaries {
+  id               Int     @id @default(autoincrement())
+  session_id       Int?
+  billed_to_id     Int?
+  price            Float?  @db.Float
+  payment          Float?  @db.Float
+  public_notes     String? @db.Text
+  private_notes    String? @db.Text
+  admin_price_note String? @db.Text
+  admin_pay_note   String? @db.Text
+  location         String? @db.VarChar(255)
+  subject_type     String? @db.VarChar(255)
+  final_price      Float?  @db.Float
+  final_pay        Float?  @db.Float
+  finalized        Int?
+}
+
+model session_uses {
+  id                    Int     @id @default(autoincrement())
+  user_id               Int?
+  session_id            Int?
+  start                 Int?
+  last_check            Int?
+  whiteboard_start      Int?
+  whiteboard_last_check Int?
+  type                  String? @db.VarChar(255)
+  franchise_id          Int?
+  session_hash          String? @db.VarChar(255)
+  closed                Int?
+  wb_loads              Int?
+
+  @@index([franchise_id], map: "franchise_id")
+  @@index([last_check], map: "last_check")
+  @@index([session_id], map: "session_id")
+  @@index([start], map: "start")
+  @@index([user_id], map: "user_id")
+}
+
+model sessions {
+  id                         Int     @id @default(autoincrement())
+  subject_type_id            Int?
+  location_id                Int?
+  student_id                 Int?
+  tutor_id                   Int?
+  time                       Int?
+  duration                   Int?
+  franchise_id               Int?
+  hash                       String? @db.VarChar(255)
+  title                      String? @db.VarChar(255)
+  event_type                 String? @default("tutoring") @db.VarChar(255)
+  labor_type_id              Int?
+  just_day                   Int?
+  tutor_public_notes         String? @db.Text
+  tutor_private_notes        String? @db.Text
+  status                     String? @default("confirmed") @db.VarChar(255)
+  admin_pay_note             String? @db.Text
+  admin_price_note           String? @db.Text
+  status_details             String? @default("normal") @db.VarChar(255)
+  admin_pay_notes            String? @db.Text
+  admin_price_notes          String? @db.Text
+  client_service_id          Int?
+  payment_type               String? @default("per_hour") @db.VarChar(255)
+  salary_amount              Float?  @db.Float
+  service_type_id            Int?
+  service_id                 Int?
+  finalized_by               Int?
+  edited_by                  String? @db.VarChar(255)
+  QB_num                     Int?
+  final_hourly_pay           Float?  @db.Float
+  final_fixed_pay            Float?  @db.Float
+  final_fixed_price          Float?  @db.Float
+  final_hourly_price         Float?  @db.Float
+  repeat_type                String? @default("no_repeat") @db.VarChar(255)
+  repeat_until               Int?
+  allDay                     Int?
+  note_to_tutor              String? @db.Text
+  created                    Int?
+  repeat_interval            String? @default("weekly") @db.VarChar(255)
+  is_free                    Int?
+  flagged                    Int?
+  parent_session_id          Int?
+  whiteboard_version         String? @default("7.3") @db.VarChar(255)
+  total_pay                  Float?  @db.Float
+  total_price                Float?  @db.Float
+  search_info                String? @db.Text
+  students                   String? @db.VarChar(255)
+  tokbox_sessionId           String? @db.VarChar(255)
+  wb_version                 Int?    @default(2)
+  rtmp_server                String? @default("rtmp4.tutortrove.com") @db.VarChar(255)
+  netsexported               String? @db.VarChar(255)
+  dropbox_user_id            String? @db.VarChar(255)
+  rtmp_application           String? @db.VarChar(255)
+  auto_broken                Int?
+  auto_duplicated            Int?
+  auto_reset_for_tutorbright String? @db.VarChar(255)
+  wowza_seconds              Int?
+  wowza_flag                 Int?
+  state                      String? @db.LongText
+  locator                    String? @db.VarChar(255)
+  new_wb                     Int?
+  mh_title                   String? @db.VarChar(255)
+  mh_grade_unit_week         String? @db.VarChar(255)
+  mh_template                String? @db.VarChar(255)
+  mh_skilltype               String? @db.VarChar(255)
+  mgh_last_dir               String? @db.VarChar(255)
+  matching_code              String? @db.VarChar(255)
+  hold                       Boolean @default(false)
+
+  @@index([franchise_id], map: "franchise_id")
+  @@index([hash], map: "hash")
+  @@index([time], map: "time_idx")
+  @@index([tutor_id], map: "tutor_id")
+}
+
+model sessions_users {
+  id                Int     @id @default(autoincrement())
+  session_id        Int?
+  user_id           Int?
+  hash              String? @db.VarChar(255)
+  type              String? @db.VarChar(255)
+  fixed_rate        Float?  @db.Float
+  hourly_rate       Float?  @db.Float
+  attendance_status String? @default("normal") @db.VarChar(255)
+  has_review        Int?
+  export_id         Int?
+  franchise_id      Int?
+
+  @@index([attendance_status], map: "attendance")
+  @@index([franchise_id], map: "franchise_id")
+  @@index([hash], map: "hash")
+  @@index([session_id], map: "session_id")
+  @@index([user_id], map: "user_id")
+}
+
+model subject_types {
+  id               Int     @id @default(autoincrement())
+  title            String? @db.VarChar(255)
+  franchise_id     Int?
+  description      String? @db.Text
+  default_selected Int?
+  is_default       Int?
+}
+
+model subjects {
+  id           Int     @id @default(autoincrement())
+  name         String? @db.VarChar(255)
+  franchise_id Int?
+}
+
+model template_fields {
+  id                  Int     @id @default(autoincrement())
+  review_template_id  Int?
+  visible_to_tutors   Int?
+  visible_to_parents  Int?
+  visible_to_students Int?
+  name                String? @db.VarChar(255)
+  required            Int?
+  description         String? @db.VarChar(255)
+  order_num           Int?
+  type                String? @db.VarChar(255)
+}
+
+model testimonials {
+  id      Int     @id @default(autoincrement())
+  content String? @db.Text
+  name    String? @db.VarChar(255)
+}
+
+model timezones {
+  id               Int      @id @default(autoincrement())
+  name             String?  @db.VarChar(255)
+  title            String?  @db.VarChar(255)
+  daylight_savings Int?     @default(1)
+  offset           Decimal? @db.Decimal(3, 2)
+  ical_timezone    String?  @db.VarChar(255)
+  ical_vtimezone   String?  @db.Text
+}
+
+model tutors {
+  id                    Int     @id @default(autoincrement())
+  about                 String? @db.Text
+  education             String? @db.Text
+  experience            String? @db.Text
+  confirmed             Int?
+  subjects              String? @db.Text
+  availability          String? @db.Text
+  user_id               Int?
+  visible_to_all        Int?
+  subject_types         String? @db.VarChar(255)
+  locations             String? @db.VarChar(255)
+  pay_bracket_id        Int?
+  employment_status     String? @default("1099") @db.VarChar(255)
+  blocked_subject_types String? @db.VarChar(255)
+  blocked_locations     String? @db.VarChar(255)
+  blocked_labor_types   String? @db.VarChar(255)
+  payment_type          String? @default("per_hour") @db.VarChar(255)
+  salary_amount         Float?  @db.Float
+  blocked_services      String? @db.VarChar(255)
+  cal_color             String? @db.VarChar(255)
+  cal_default_selected  Int?    @default(1)
+  cal_multi_visible     Int?    @default(1)
+  default_pay           Float?  @db.Float
+  default_price         Float?  @db.Float
+  franchise_id          Int?
+
+  @@index([user_id], map: "user_id")
+}
+
+model tutors_students {
+  id         Int  @id @default(autoincrement())
+  tutor_id   Int?
+  student_id Int?
+}
+
+model user_change_tracking {
+  id               Int     @id @default(autoincrement())
+  user_id          Int?
+  modifier_user_id Int?
+  fields           String? @db.Text
+  action           String? @db.VarChar(255)
+  time             Int?
+  franchise_id     Int?
+  page_url         String? @db.VarChar(255)
+}
+
+model user_notes {
+  id                 Int     @id @default(autoincrement())
+  user_id            Int?
+  time               Int?
+  author_id          Int?
+  file_url           String? @db.VarChar(255)
+  franchise_id       Int?
+  title              String? @db.VarChar(255)
+  note               String? @db.Text
+  visible_to_parents Int?
+  visible_to_tutors  Int?
+  visible_to_student Int?
+  editor_id          Int?
+}
+
+model users {
+  id                Int       @id @default(autoincrement())
+  email             String?   @db.VarChar(255)
+  password          String?   @db.VarChar(255)
+  invite            String?   @db.VarChar(255)
+  name              String?   @db.VarChar(255)
+  last_visit        DateTime? @db.DateTime(0)
+  num_visits        Int?
+  last_check        Int?
+  phone             String?   @db.VarChar(255)
+  balance           Float?    @db.Float
+  fbuid             Int?
+  franchise_id      Int?
+  fbhash            String?   @db.VarChar(255)
+  last_name         String?   @db.VarChar(255)
+  image_id          Int?
+  authority         Int?
+  external_user_id  String?   @db.VarChar(255)
+  active            Int?
+  old_franchise_id  Int?
+  skype             String?   @db.VarChar(255)
+  ical              String?   @db.VarChar(255)
+  timezone          String?   @default("America/New_York") @db.VarChar(255)
+  parent_id         Int?
+  price_bracket_id  Int?
+  is_active         Int?      @default(1)
+  is_parent         Int?
+  created           Int?
+  can_be_tutored    Int?      @default(1)
+  is_payer          Int?
+  is_student        Int?      @default(1)
+  client_account_id Int?
+  cell_phone        String?   @db.VarChar(255)
+  address1          String?   @db.VarChar(255)
+  address2          String?   @db.VarChar(255)
+  city              String?   @db.VarChar(255)
+  state             String?   @db.VarChar(255)
+  zip               String?   @db.VarChar(255)
+  home_phone        String?   @db.VarChar(255)
+  work_phone        String?   @db.VarChar(255)
+  export_name       String?   @db.VarChar(255)
+  cell_carrier_id   Int?
+  gender            String?   @db.VarChar(255)
+  birthmonth        Int?
+  birthday          Int?
+  birthyear         Int?
+  country           String?   @db.VarChar(255)
+  school            String?   @db.VarChar(255)
+  grade             String?   @db.VarChar(255)
+  notes             String?   @db.Text
+  invite_sent       Int?
+  salty             Int?
+  imported          Int?
+
+  @@index([client_account_id], map: "client_account_id")
+  @@index([franchise_id], map: "franchise_id")
+  @@index([ical], map: "ical_idx")
+}
+
+model videos {
+  id     Int     @id @default(autoincrement())
+  width  Int?
+  height Int?
+  src    String? @db.VarChar(255)
+  title  String? @db.VarChar(255)
+}
+
+model wowza_disconnects {
+  id      Int     @id @default(autoincrement())
+  time    Int?
+  url     String? @db.VarChar(255)
+  session String? @db.VarChar(255)
+  user    String? @db.VarChar(255)
+  message String? @db.VarChar(255)
+
+  @@index([url], map: "url")
+}
diff --git a/src/config/db.config.ts b/src/config/db.config.ts
new file mode 100644
index 0000000..b5bf6ce
--- /dev/null
+++ b/src/config/db.config.ts
@@ -0,0 +1,5 @@
+import { PrismaClient } from "@prisma/client";
+
+const prisma = new PrismaClient();
+
+export default prisma;
diff --git a/src/config/logger.config.ts b/src/config/logger.config.ts
new file mode 100644
index 0000000..e5b9ccd
--- /dev/null
+++ b/src/config/logger.config.ts
@@ -0,0 +1,22 @@
+import winston from "winston";
+
+const logger = winston.createLogger({
+  level: process.env.LOG_LEVEL || "info",
+  format: winston.format.json(),
+  defaultMeta: { service: "user-service" },
+  transports: [new winston.transports.Console()],
+});
+
+//
+// If we're not in production then log to the `console` with the format:
+// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
+//
+if (process.env.NODE_ENV === "local") {
+  logger.add(
+    new winston.transports.Console({
+      format: winston.format.simple(),
+    }),
+  );
+}
+
+export default logger;
diff --git a/src/config/swagger.config.ts b/src/config/swagger.config.ts
new file mode 100644
index 0000000..d3f7af9
--- /dev/null
+++ b/src/config/swagger.config.ts
@@ -0,0 +1,31 @@
+import swaggerJsdoc from "swagger-jsdoc";
+import { join } from "path";
+
+const options = {
+  definition: {
+    openapi: "3.0.0",
+    info: {
+      title: "API Documentation",
+      version: "1.0.0",
+      description: "API documentation for the authentication service",
+    },
+    security: [
+      {
+        RefererHeader: [], // Referer for getting franchise id
+      },
+    ],
+    servers: [
+      {
+        url: "http://localhost:3030",
+        description: "Development server",
+      },
+    ],
+  },
+  apis: [
+    join(__dirname, "../../documentation/swagger/routes/*.yaml"), // API route documentation
+    join(__dirname, "../../documentation/swagger/schemas/*.yaml"), // Schema documentation
+    join(__dirname, "../../documentation/swagger/security/*.yaml"), // Security documentation
+  ],
+};
+
+export const specs = swaggerJsdoc(options);
diff --git a/src/controllers/auth.controller.ts b/src/controllers/auth.controller.ts
new file mode 100644
index 0000000..a0053ce
--- /dev/null
+++ b/src/controllers/auth.controller.ts
@@ -0,0 +1,51 @@
+import { NextFunction, Request, Response } from "express";
+import * as authService from "../services/auth.service";
+import {
+  generateToken,
+  refreshToken,
+  extractTokenFromHeader,
+} from "../utils/jwt.utils";
+import logger from "../config/logger.config";
+import { Errors } from "../utils/errors.utils";
+
+export const login = async (
+  req: Request,
+  res: Response,
+  next: NextFunction,
+): Promise<void> => {
+  try {
+    const user = await authService.login(req.body);
+
+    if (!user) {
+      const invalidCredentialsError = Errors.INVALID_CREDENTIALS();
+      res
+        .status(invalidCredentialsError.statusCode)
+        .json({ error: invalidCredentialsError.message });
+
+      return;
+    }
+
+    const token = generateToken(String(user.id));
+    res.status(200).json({ token });
+
+    return;
+  } catch (error) {
+    logger.error("Login error: ", error);
+    next(error);
+  }
+};
+
+export const refresh = async (
+  req: Request,
+  res: Response,
+  next: NextFunction,
+): Promise<void> => {
+  try {
+    const token = extractTokenFromHeader(req.headers.authorization);
+    const newToken = refreshToken(token);
+    res.status(200).json({ token: newToken });
+  } catch (error) {
+    logger.error("Token refresh error: ", error);
+    next(error);
+  }
+};
diff --git a/src/index.ts b/src/index.ts
index cd0b211..2e47ba5 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,2 +1,48 @@
-// Hello world example
-console.log('Hello, world!');
\ No newline at end of file
+import express from "express";
+import cors, { CorsOptions } from "cors";
+import { Server as HttpServer } from "http";
+import logger from "./config/logger.config";
+import authRouter from "./routes/auth.routes";
+import { errorHandler } from "./middlewares/errorHandler.middleware";
+import swaggerUi from "swagger-ui-express";
+import { specs } from "./config/swagger.config";
+
+const app = express();
+app.use(express.json());
+app.use(express.urlencoded({ extended: true }));
+
+// Cors setup
+const allowedOrigins = ["http://localhost:3000"];
+if (
+  process.env.CLIENT_ORIGIN &&
+  !allowedOrigins.includes(process.env.CLIENT_ORIGIN)
+) {
+  allowedOrigins.push(process.env.CLIENT_ORIGIN);
+}
+const corsOptions: CorsOptions = {
+  origin: function (origin, callback) {
+    if (!origin || allowedOrigins.includes(origin)) {
+      callback(null, true);
+    } else {
+      logger.error(`Origin: ${origin} not allowed`);
+      callback(new Error("Not allowed by CORS"));
+    }
+  },
+  credentials: true,
+};
+app.use(cors(corsOptions));
+
+app.use("/api/auth", authRouter);
+
+app.use(errorHandler);
+
+// Swagger documentation route
+app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));
+
+const httpServer = new HttpServer(app);
+
+const PORT: number = Number(process.env.PORT) || 3030;
+const server = httpServer.listen(PORT, () => {
+  logger.info(`Server listening at port: ${PORT}`);
+});
+server.on("error", (error) => logger.error(`Error in server: ${error}`));
diff --git a/src/middlewares/auth.middleware.ts b/src/middlewares/auth.middleware.ts
new file mode 100644
index 0000000..4c3e790
--- /dev/null
+++ b/src/middlewares/auth.middleware.ts
@@ -0,0 +1,47 @@
+import { NextFunction, Request, Response } from "express";
+import { verifyToken } from "../utils/jwt.utils";
+import { AppError } from "../utils/errors.utils";
+import { Errors } from "../utils/errors.utils";
+import { extractTokenFromHeader } from "../utils/jwt.utils";
+
+export interface AuthenticatedRequest extends Request {
+  user?: {
+    id: string;
+    tokenExp?: number;
+  };
+}
+
+export const authMiddleware = (
+  req: AuthenticatedRequest,
+  res: Response,
+  next: NextFunction,
+): void => {
+  try {
+    const token = extractTokenFromHeader(req.headers.authorization);
+    const decoded = verifyToken(token);
+
+    // For future implementation: Check if privileged user needs refresh
+
+    req.user = {
+      id: decoded.id,
+      tokenExp: decoded.exp,
+    };
+
+    next();
+  } catch (error) {
+    if (error instanceof AppError) {
+      res.status(error.statusCode).json({
+        status: error.status,
+        message: error.message,
+      });
+      return;
+    }
+    // Handle unexpected errors
+    const serverError = Errors.SERVER_ERROR("Authentication failed");
+    res.status(serverError.statusCode).json({
+      status: serverError.status,
+      message: serverError.message,
+    });
+    return;
+  }
+};
diff --git a/src/middlewares/errorHandler.middleware.ts b/src/middlewares/errorHandler.middleware.ts
new file mode 100644
index 0000000..be11dd1
--- /dev/null
+++ b/src/middlewares/errorHandler.middleware.ts
@@ -0,0 +1,27 @@
+import { Request, Response, NextFunction } from "express";
+import { AppError } from "../utils/errors.utils";
+import logger from "../config/logger.config";
+
+export const errorHandler = (
+  error: Error,
+  _req: Request,
+  res: Response,
+  _next: NextFunction,
+): void => {
+  if (error instanceof AppError) {
+    res.status(error.statusCode).json({
+      status: error.status,
+      message: error.message,
+    });
+
+    return;
+  }
+
+  // Handle unexpected errors
+  logger.error("Unexpected error:", error);
+  res.status(500).json({
+    status: "error",
+    message: "An unexpected error occurred",
+  });
+  return;
+};
diff --git a/src/middlewares/franchise_id.middleware.ts b/src/middlewares/franchise_id.middleware.ts
new file mode 100644
index 0000000..adddbfe
--- /dev/null
+++ b/src/middlewares/franchise_id.middleware.ts
@@ -0,0 +1,30 @@
+import { Request, Response, NextFunction } from "express";
+import { getFranchiseId } from "../utils/helperFunctions.utils";
+import { Errors } from "../utils/errors.utils";
+
+export interface RequestWithFranchiseId extends Request {
+  franchiseId?: string;
+}
+
+export const franchiseIdMiddleware = async (
+  req: RequestWithFranchiseId,
+  _res: Response,
+  next: NextFunction,
+) => {
+  try {
+    const referer = req.headers.referer;
+    if (!referer) {
+      throw Errors.NO_FRANCHISE_ID("No referrer header found");
+    }
+
+    const franchiseId = await getFranchiseId(referer);
+    if (!franchiseId) {
+      throw Errors.NO_FRANCHISE_ID();
+    }
+
+    req.franchiseId = franchiseId;
+    next();
+  } catch (error) {
+    next(error);
+  }
+};
diff --git a/src/middlewares/validateRequest.middleware.ts b/src/middlewares/validateRequest.middleware.ts
new file mode 100644
index 0000000..481011c
--- /dev/null
+++ b/src/middlewares/validateRequest.middleware.ts
@@ -0,0 +1,36 @@
+import { ZodError, ZodSchema } from "zod";
+import { Request, Response, NextFunction, RequestHandler } from "express";
+import { Errors } from "../utils/errors.utils";
+
+export const validateRequest = (schema: ZodSchema): RequestHandler => {
+  return async (
+    req: Request,
+    res: Response,
+    next: NextFunction,
+  ): Promise<void> => {
+    try {
+      req.body = await schema.parseAsync(req.body);
+      return next();
+    } catch (error) {
+      if (error instanceof ZodError) {
+        const errors = error.errors.map((err) => ({
+          field: err.path.join("."),
+          message: err.message,
+          code: err.code,
+        }));
+
+        const validationError = Errors.VALIDATION();
+        res.status(validationError.statusCode).json({
+          status: validationError.status,
+          message: validationError.message,
+          errors,
+        });
+
+        return;
+      }
+
+      const serverError = Errors.SERVER_ERROR();
+      return next(serverError);
+    }
+  };
+};
diff --git a/src/routes/auth.routes.ts b/src/routes/auth.routes.ts
new file mode 100644
index 0000000..faa37a0
--- /dev/null
+++ b/src/routes/auth.routes.ts
@@ -0,0 +1,13 @@
+import { Router } from "express";
+import * as authController from "../controllers/auth.controller";
+import { validateRequest } from "../middlewares/validateRequest.middleware";
+import { LoginSchema } from "../utils/zodSchemas.utils";
+
+const authRouter = Router();
+
+authRouter
+  .route("/login")
+  .post(validateRequest(LoginSchema), authController.login);
+authRouter.route("/refresh").get(authController.refresh);
+
+export default authRouter;
diff --git a/src/services/auth.service.ts b/src/services/auth.service.ts
new file mode 100644
index 0000000..8515464
--- /dev/null
+++ b/src/services/auth.service.ts
@@ -0,0 +1,40 @@
+import { users } from "@prisma/client";
+import prisma from "../config/db.config";
+import {
+  comparePasswords,
+  isMD5Hash,
+  migrateMD5Hash,
+} from "../utils/password.utils";
+import { LoginInput } from "../utils/types.utils";
+
+export const login = async (credentials: LoginInput): Promise<users | null> => {
+  const user = await prisma.users.findFirst({
+    where: { email: credentials.email },
+  });
+  if (!user || !user.password) {
+    return null;
+  }
+
+  const isPasswordValid = await comparePasswords(
+    credentials.password,
+    user.password,
+  );
+  if (!isPasswordValid) {
+    return null;
+  }
+
+  // If password is MD5 hashed, migrate to bcrypt
+  if (isMD5Hash(user.password)) {
+    const bcryptHash = await migrateMD5Hash(credentials.password);
+
+    // Update user's hash in database
+    const updatedUser = await prisma.users.update({
+      where: { id: user.id },
+      data: { password: bcryptHash },
+    });
+
+    return updatedUser;
+  }
+
+  return user;
+};
diff --git a/src/utils/errors.utils.ts b/src/utils/errors.utils.ts
new file mode 100644
index 0000000..b9bf016
--- /dev/null
+++ b/src/utils/errors.utils.ts
@@ -0,0 +1,25 @@
+export class AppError extends Error {
+  constructor(
+    public statusCode: number,
+    public status: string,
+    message: string,
+  ) {
+    super(message);
+    Object.setPrototypeOf(this, AppError.prototype);
+  }
+}
+
+export const Errors = {
+  UNAUTHORIZED: (message = "Unauthorized access") =>
+    new AppError(401, "error", message),
+  INVALID_CREDENTIALS: (message = "Invalid credentials") =>
+    new AppError(401, "error", message),
+  INVALID_TOKEN: (message = "Invalid token") =>
+    new AppError(401, "error", message),
+  VALIDATION: (message = "Validation failed") =>
+    new AppError(400, "error", message),
+  SERVER_ERROR: (message = "Internal server error") =>
+    new AppError(500, "error", message),
+  NO_FRANCHISE_ID: (message = "No franchise found for the given referer") =>
+    new AppError(406, "error", message),
+} as const;
diff --git a/src/utils/helperFunctions.utils.ts b/src/utils/helperFunctions.utils.ts
new file mode 100644
index 0000000..a5c10c5
--- /dev/null
+++ b/src/utils/helperFunctions.utils.ts
@@ -0,0 +1,23 @@
+import prisma from "../config/db.config";
+
+export const getFranchiseId = async (
+  referer: string,
+): Promise<string | undefined> => {
+  try {
+    const url = new URL(referer);
+    const hostname = url.hostname.replace("www.", "");
+
+    const isTutorTrove = hostname.includes(".tutortrove");
+    const identifier = isTutorTrove
+      ? hostname.split(".tutortrove")[0]
+      : hostname;
+
+    const franchise = await prisma.franchises.findFirst({
+      where: { [isTutorTrove ? "name" : "host"]: identifier },
+    });
+
+    return franchise?.id?.toString();
+  } catch {
+    return undefined;
+  }
+};
diff --git a/src/utils/jwt.utils.ts b/src/utils/jwt.utils.ts
new file mode 100644
index 0000000..231ab6b
--- /dev/null
+++ b/src/utils/jwt.utils.ts
@@ -0,0 +1,68 @@
+import jwt, { JwtPayload } from "jsonwebtoken";
+import { Errors } from "./errors.utils";
+import logger from "../config/logger.config";
+
+const JWT_SECRET = process.env.JWT_SECRET || "default_jwt_secret";
+
+const TOKEN_EXPIRATION = {
+  DEFAULT: 22 * 60 * 60, // 22 hours
+  PRIVILEGED: 60 * 60, // 1 hour
+};
+
+export interface TokenPayload extends JwtPayload {
+  id: string;
+  exp?: number;
+  iat?: number;
+  // Add field for future user type implementation
+  userType?: string;
+}
+
+export const generateToken = (userId: string, userType?: string): string => {
+  // For now, always use DEFAULT expiration
+  const expiresIn = TOKEN_EXPIRATION.DEFAULT;
+
+  return jwt.sign(
+    {
+      id: userId,
+      userType, // Store for future implementation
+    },
+    JWT_SECRET,
+    { expiresIn },
+  );
+};
+
+export const verifyToken = (token: string): TokenPayload => {
+  try {
+    return jwt.verify(token, JWT_SECRET) as TokenPayload;
+  } catch (error) {
+    if (error instanceof jwt.TokenExpiredError) {
+      throw Errors.UNAUTHORIZED("Token has expired");
+    }
+    throw Errors.INVALID_TOKEN();
+  }
+};
+
+export const refreshToken = (oldToken: string): string => {
+  try {
+    const decoded = verifyToken(oldToken);
+
+    // Generate new token with same user info
+    return generateToken(decoded.id, decoded.userType);
+  } catch (error) {
+    logger.error("Cannot refresh invalid token:", error);
+    throw Errors.INVALID_TOKEN("Cannot refresh invalid token");
+  }
+};
+
+export const extractTokenFromHeader = (authHeader?: string): string => {
+  if (!authHeader) {
+    throw Errors.UNAUTHORIZED("No authorization header");
+  }
+
+  const token = authHeader.split(" ")[1]; // Bearer <token>
+  if (!token) {
+    throw Errors.UNAUTHORIZED("No token provided");
+  }
+
+  return token;
+};
diff --git a/src/utils/password.utils.ts b/src/utils/password.utils.ts
new file mode 100644
index 0000000..4566586
--- /dev/null
+++ b/src/utils/password.utils.ts
@@ -0,0 +1,37 @@
+import * as bcrypt from "bcrypt";
+import * as crypto from "crypto";
+
+const SALT_ROUNDS = Number(process.env.SALT_ROUNDS) || 10;
+
+export const isMD5Hash = (hash: string): boolean => {
+  const md5Regex = /^[a-f0-9]{32}$/i;
+  return md5Regex.test(hash);
+};
+
+export const createMD5Hash = (password: string): string => {
+  return crypto.createHash("md5").update(password).digest("hex");
+};
+
+export const hashPassword = async (password: string): Promise<string> => {
+  return bcrypt.hash(password, SALT_ROUNDS);
+};
+
+export const comparePasswords = async (
+  plainPassword: string,
+  hashedPassword: string,
+): Promise<boolean> => {
+  // Check if the stored hash is MD5
+  if (isMD5Hash(hashedPassword)) {
+    const md5Hash = createMD5Hash(plainPassword);
+    return md5Hash.toLowerCase() === hashedPassword.toLowerCase();
+  }
+
+  // Otherwise assume it's bcrypt
+  return bcrypt.compare(plainPassword, hashedPassword);
+};
+
+export const migrateMD5Hash = async (
+  plainPassword: string,
+): Promise<string> => {
+  return hashPassword(plainPassword);
+};
diff --git a/src/utils/types.utils.ts b/src/utils/types.utils.ts
new file mode 100644
index 0000000..4644ef3
--- /dev/null
+++ b/src/utils/types.utils.ts
@@ -0,0 +1,4 @@
+import { z } from "zod";
+import { LoginSchema } from "./zodSchemas.utils";
+
+export type LoginInput = z.infer<typeof LoginSchema>;
diff --git a/src/utils/zodSchemas.utils.ts b/src/utils/zodSchemas.utils.ts
new file mode 100644
index 0000000..dad65cc
--- /dev/null
+++ b/src/utils/zodSchemas.utils.ts
@@ -0,0 +1,18 @@
+import { z } from "zod";
+
+export const LoginSchema = z.object({
+  email: z
+    .string({
+      required_error: "Email is required",
+      invalid_type_error: "Email must be a string",
+    })
+    .email("Invalid email format")
+    .transform((email) => email.toLowerCase().trim()),
+
+  password: z
+    .string({
+      required_error: "Password is required",
+      invalid_type_error: "Password must be a string",
+    })
+    .min(1, "Password is required"),
+});
diff --git a/tests/config/setup.ts b/tests/config/setup.ts
new file mode 100644
index 0000000..411718e
--- /dev/null
+++ b/tests/config/setup.ts
@@ -0,0 +1,15 @@
+import { PrismaClient } from "@prisma/client";
+import { mockDeep, DeepMockProxy } from "jest-mock-extended";
+import prisma from "../../src/config/db.config";
+
+jest.setTimeout(5000);
+jest.mock("../../src/config/db.config", () => ({
+  __esModule: true,
+  default: mockDeep<PrismaClient>(),
+}));
+
+beforeEach(() => {
+  jest.clearAllMocks();
+});
+
+export const prismaMock = prisma as unknown as DeepMockProxy<PrismaClient>;
diff --git a/tests/fixtures/auth.ts b/tests/fixtures/auth.ts
new file mode 100644
index 0000000..bbee70b
--- /dev/null
+++ b/tests/fixtures/auth.ts
@@ -0,0 +1,24 @@
+import jwt from "jsonwebtoken";
+
+const JWT_SECRET = process.env.JWT_SECRET || "default_jwt_secret";
+
+export const mockLoginInputs = {
+  valid: {
+    email: "test@example.com",
+    password: "password123",
+  },
+  invalid: {
+    email: "invalid@example.com",
+    password: "wrongpassword",
+  },
+  malformed: {
+    email: "not-an-email",
+    password: "",
+  },
+};
+
+export const mockTokens = {
+  valid: jwt.sign({ id: "1" }, JWT_SECRET),
+  expired: jwt.sign({ id: "1" }, JWT_SECRET, { expiresIn: "-1h" }),
+  malformed: "invalid.token.here",
+};
diff --git a/tests/fixtures/franchises.ts b/tests/fixtures/franchises.ts
new file mode 100644
index 0000000..57573a3
--- /dev/null
+++ b/tests/fixtures/franchises.ts
@@ -0,0 +1,14 @@
+import { franchises } from "@prisma/client";
+
+export const mockFranchises: Partial<franchises>[] = [
+  {
+    id: 1,
+    name: "test-franchise",
+    host: "example.com",
+  },
+  {
+    id: 2,
+    name: "custom-franchise",
+    host: "custom-domain.com",
+  },
+];
diff --git a/tests/fixtures/users.ts b/tests/fixtures/users.ts
new file mode 100644
index 0000000..de8aa09
--- /dev/null
+++ b/tests/fixtures/users.ts
@@ -0,0 +1,20 @@
+import { users } from "@prisma/client";
+
+export const mockUsers: Partial<users>[] = [
+  {
+    id: 1,
+    email: "test@example.com",
+    password: "$2b$10$dGQI8nA8gZCj4UPXnwXgIOK9yvI8A1QZn3NqcWy.9Zy0YHlcxqE8W", // password123
+    name: "Test User",
+    franchise_id: 1,
+    is_active: 1,
+  },
+  {
+    id: 2,
+    email: "admin@example.com",
+    password: "$2b$10$dGQI8nA8gZCj4UPXnwXgIOK9yvI8A1QZn3NqcWy.9Zy0YHlcxqE8W", // password123
+    name: "Admin User",
+    franchise_id: 1,
+    is_active: 1,
+  },
+];
diff --git a/tests/helpers/testUtils.ts b/tests/helpers/testUtils.ts
new file mode 100644
index 0000000..39df2a4
--- /dev/null
+++ b/tests/helpers/testUtils.ts
@@ -0,0 +1,24 @@
+import express, { Express } from "express";
+import request from "supertest";
+import { users } from "@prisma/client";
+import { generateToken } from "../../src/utils/jwt.utils";
+
+export const createAuthenticatedRequest = (app: Express, user: users) => {
+  const token = generateToken(String(user.id));
+  return {
+    get: (url: string) =>
+      request(app).get(url).set("Authorization", `Bearer ${token}`),
+    post: (url: string) =>
+      request(app).post(url).set("Authorization", `Bearer ${token}`),
+    put: (url: string) =>
+      request(app).put(url).set("Authorization", `Bearer ${token}`),
+    delete: (url: string) =>
+      request(app).delete(url).set("Authorization", `Bearer ${token}`),
+  };
+};
+
+export const createTestApp = () => {
+  const app = express();
+  app.use(express.json());
+  return app;
+};
diff --git a/tests/integration/auth/auth.middleware.test.ts b/tests/integration/auth/auth.middleware.test.ts
new file mode 100644
index 0000000..fa83d7b
--- /dev/null
+++ b/tests/integration/auth/auth.middleware.test.ts
@@ -0,0 +1,59 @@
+import request from "supertest";
+import { Response } from "express";
+import { createTestApp } from "../../helpers/testUtils";
+import { mockUsers } from "../../fixtures/users";
+import { mockTokens } from "../../fixtures/auth";
+import {
+  AuthenticatedRequest,
+  authMiddleware,
+} from "../../../src/middlewares/auth.middleware";
+import { generateToken } from "../../../src/utils/jwt.utils";
+import { errorHandler } from "../../../src/middlewares/errorHandler.middleware"; // Add this
+
+const app = createTestApp();
+
+app.use(errorHandler);
+
+app.get(
+  "/protected",
+  authMiddleware,
+  (req: AuthenticatedRequest, res: Response) => {
+    res.json({ success: true, user: req.user });
+  },
+);
+
+describe("Auth Middleware", () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it("should allow access with valid token", async () => {
+    const token = generateToken(String(mockUsers[0].id));
+
+    const response = await request(app)
+      .get("/protected")
+      .set("Authorization", `Bearer ${token}`);
+
+    expect(response.status).toBe(200);
+    expect(response.body.success).toBe(true);
+    expect(response.body.user).toMatchObject({ id: String(mockUsers[0].id) });
+  });
+
+  it("should reject access with malformed token", async () => {
+    const response = await request(app)
+      .get("/protected")
+      .set("Authorization", `Bearer ${mockTokens.malformed}`);
+
+    expect(response.status).toBe(401);
+    expect(response.body.message).toBe("Invalid token");
+  });
+
+  it("should reject access with invalid authorization format", async () => {
+    const response = await request(app)
+      .get("/protected")
+      .set("Authorization", "InvalidFormat");
+
+    expect(response.status).toBe(401);
+    expect(response.body.message).toBe("No token provided");
+  });
+});
diff --git a/tests/integration/auth/login.test.ts b/tests/integration/auth/login.test.ts
new file mode 100644
index 0000000..e019f2d
--- /dev/null
+++ b/tests/integration/auth/login.test.ts
@@ -0,0 +1,75 @@
+import request from "supertest";
+import { createTestApp } from "../../helpers/testUtils";
+import { mockUsers } from "../../fixtures/users";
+import { mockLoginInputs } from "../../fixtures/auth";
+import { prismaMock } from "../../config/setup";
+import authRouter from "../../../src/routes/auth.routes";
+import { errorHandler } from "../../../src/middlewares/errorHandler.middleware";
+import { users } from "@prisma/client";
+import * as passwordUtils from "../../../src/utils/password.utils";
+
+const app = createTestApp();
+app.use("/api/auth", authRouter);
+app.use(errorHandler);
+
+jest.mock("../../../src/utils/password.utils");
+
+describe("POST /api/auth/login", () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+    jest
+      .spyOn(passwordUtils, "comparePasswords")
+      .mockImplementation(
+        async (plain, _hashed) => plain === mockLoginInputs.valid.password,
+      );
+  });
+
+  it("should login successfully with valid credentials", async () => {
+    prismaMock.users.findFirst.mockResolvedValue(mockUsers[0] as users);
+
+    const response = await request(app)
+      .post("/api/auth/login")
+      .send(mockLoginInputs.valid);
+
+    expect(response.status).toBe(200);
+    expect(response.body).toHaveProperty("token");
+  });
+
+  it("should fail with invalid credentials", async () => {
+    prismaMock.users.findFirst.mockResolvedValue(null);
+
+    const response = await request(app)
+      .post("/api/auth/login")
+      .send(mockLoginInputs.invalid);
+
+    expect(response.status).toBe(401);
+    expect(response.body).toHaveProperty("error", "Invalid credentials");
+  });
+
+  it("should fail with malformed email", async () => {
+    const response = await request(app)
+      .post("/api/auth/login")
+      .send(mockLoginInputs.malformed);
+
+    expect(response.status).toBe(400);
+    expect(response.body.status).toBe("error");
+    expect(response.body.message).toBe("Validation failed");
+    expect(response.body.errors).toContainEqual(
+      expect.objectContaining({
+        field: "email",
+        message: "Invalid email format",
+      }),
+    );
+  });
+
+  it("should handle server errors gracefully", async () => {
+    prismaMock.users.findFirst.mockRejectedValue(new Error("Database error"));
+
+    const response = await request(app)
+      .post("/api/auth/login")
+      .send(mockLoginInputs.valid);
+
+    expect(response.status).toBe(500);
+    expect(response.body.message).toBe("An unexpected error occurred");
+  });
+});
diff --git a/tests/integration/middlewares/franchise_id.middleware.test.ts b/tests/integration/middlewares/franchise_id.middleware.test.ts
new file mode 100644
index 0000000..3862d8c
--- /dev/null
+++ b/tests/integration/middlewares/franchise_id.middleware.test.ts
@@ -0,0 +1,110 @@
+import { Response } from "express";
+import request from "supertest";
+import { createTestApp } from "../../helpers/testUtils";
+import { prismaMock } from "../../config/setup";
+import {
+  franchiseIdMiddleware,
+  RequestWithFranchiseId,
+} from "../../../src/middlewares/franchise_id.middleware";
+import { errorHandler } from "../../../src/middlewares/errorHandler.middleware";
+import { mockFranchises } from "../../fixtures/franchises";
+import { franchises } from "@prisma/client";
+import TestAgent from "supertest/lib/agent";
+
+const app = createTestApp();
+
+// Add test endpoint using the middleware
+app.get(
+  "/test-franchise",
+  franchiseIdMiddleware,
+  (req: RequestWithFranchiseId, res: Response) => {
+    res.json({ franchiseId: req.franchiseId });
+  },
+);
+
+app.use(errorHandler);
+
+describe("Franchise ID Middleware", () => {
+  let app;
+  let agent: TestAgent;
+
+  beforeAll(() => {
+    app = createTestApp();
+    app.get(
+      "/test-franchise",
+      franchiseIdMiddleware,
+      (req: RequestWithFranchiseId, res: Response) => {
+        res.json({ franchiseId: req.franchiseId });
+      },
+    );
+    app.use(errorHandler);
+    agent = request(app);
+  });
+  beforeEach(() => {
+    jest.clearAllMocks();
+    prismaMock.franchises.findFirst.mockReset();
+  });
+
+  it("should set franchiseId for valid tutortrove subdomain", async () => {
+    prismaMock.franchises.findFirst.mockResolvedValue(
+      mockFranchises[0] as franchises,
+    );
+
+    const response = await agent
+      .get("/test-franchise")
+      .set("referer", "https://test-franchise.tutortrove.com");
+
+    expect(response.status).toBe(200);
+    expect(response.body).toEqual({ franchiseId: "1" });
+    expect(prismaMock.franchises.findFirst).toHaveBeenCalledWith({
+      where: { name: "test-franchise" },
+    });
+  });
+
+  it("should set franchiseId for valid custom domain", async () => {
+    prismaMock.franchises.findFirst.mockResolvedValue(
+      mockFranchises[1] as franchises,
+    );
+
+    const response = await agent
+      .get("/test-franchise")
+      .set("referer", "https://custom-domain.com");
+
+    expect(response.status).toBe(200);
+    expect(response.body).toEqual({ franchiseId: "2" });
+    expect(prismaMock.franchises.findFirst).toHaveBeenCalledWith({
+      where: { host: "custom-domain.com" },
+    });
+  });
+
+  it("should handle missing referer header", async () => {
+    const response = await agent.get("/test-franchise");
+
+    expect(response.status).toBe(406);
+    expect(response.body.message).toBe("No referrer header found");
+  });
+
+  it("should handle non-existent franchise", async () => {
+    prismaMock.franchises.findFirst.mockResolvedValue(null);
+
+    const response = await agent
+      .get("/test-franchise")
+      .set("referer", "https://nonexistent.tutortrove.com");
+
+    expect(response.status).toBe(406);
+    expect(response.body.message).toBe(
+      "No franchise found for the given referer",
+    );
+  });
+
+  it("should handle invalid URLs in referer", async () => {
+    const response = await agent
+      .get("/test-franchise")
+      .set("referer", "invalid-url");
+
+    expect(response.status).toBe(406);
+    expect(response.body.message).toBe(
+      "No franchise found for the given referer",
+    );
+  });
+});
diff --git a/tests/mocks/prisma.ts b/tests/mocks/prisma.ts
new file mode 100644
index 0000000..d1e4701
--- /dev/null
+++ b/tests/mocks/prisma.ts
@@ -0,0 +1,16 @@
+import { PrismaClient } from "@prisma/client";
+import { mockDeep, DeepMockProxy } from "jest-mock-extended";
+
+export type Context = {
+  prisma: PrismaClient;
+};
+
+export type MockContext = {
+  prisma: DeepMockProxy<PrismaClient>;
+};
+
+export const createMockContext = (): MockContext => {
+  return {
+    prisma: mockDeep<PrismaClient>(),
+  };
+};
diff --git a/tests/unit/utils/jwt.utils.test.ts b/tests/unit/utils/jwt.utils.test.ts
new file mode 100644
index 0000000..c631444
--- /dev/null
+++ b/tests/unit/utils/jwt.utils.test.ts
@@ -0,0 +1,48 @@
+import { generateToken, verifyToken } from "../../../src/utils/jwt.utils";
+import jwt from "jsonwebtoken";
+import { mockUsers } from "../../fixtures/users";
+
+describe("JWT Utils", () => {
+  const userId = String(mockUsers[0].id);
+
+  describe("generateToken", () => {
+    it("should generate valid JWT token", () => {
+      const token = generateToken(userId);
+      const decoded = jwt.decode(token) as jwt.JwtPayload;
+
+      expect(decoded).toBeTruthy();
+      expect(decoded.id).toBe(userId);
+    });
+
+    it("should use correct secret", () => {
+      const token = generateToken(userId);
+      const secret = process.env.JWT_SECRET || "default_jwt_secret";
+
+      expect(() => jwt.verify(token, secret)).not.toThrow();
+      expect(() => jwt.verify(token, "wrong_secret")).toThrow();
+    });
+  });
+
+  describe("verifyToken", () => {
+    it("should verify valid token", () => {
+      const token = generateToken(userId);
+      const decoded = verifyToken(token);
+
+      expect(decoded.id).toBe(userId);
+    });
+
+    it("should throw error for invalid token", () => {
+      expect(() => verifyToken("invalid.token.here")).toThrow("Invalid token");
+    });
+
+    it("should throw error for expired token", () => {
+      const expiredToken = jwt.sign(
+        { id: userId },
+        process.env.JWT_SECRET || "default_jwt_secret",
+        { expiresIn: "0s" },
+      );
+
+      expect(() => verifyToken(expiredToken)).toThrow("Token has expired");
+    });
+  });
+});
diff --git a/tests/unit/utils/password.utils.test.ts b/tests/unit/utils/password.utils.test.ts
new file mode 100644
index 0000000..83202ad
--- /dev/null
+++ b/tests/unit/utils/password.utils.test.ts
@@ -0,0 +1,78 @@
+import {
+  hashPassword,
+  comparePasswords,
+  isMD5Hash,
+  createMD5Hash,
+  migrateMD5Hash,
+} from "../../../src/utils/password.utils";
+
+describe("Password Utils", () => {
+  const testPassword = "password123";
+  const md5Hash = "482c811da5d5b4bc6d497ffa98491e38";
+
+  describe("isMD5Hash", () => {
+    it("should correctly identify MD5 hashes", () => {
+      expect(isMD5Hash(md5Hash)).toBe(true);
+      expect(isMD5Hash("not-a-hash")).toBe(false);
+      expect(isMD5Hash("")).toBe(false);
+      expect(isMD5Hash("482c811da5d5b4bc6d497ffa98491e3")).toBe(false); // 31 chars
+      expect(isMD5Hash("482c811da5d5b4bc6d497ffa98491e38a")).toBe(false); // 33 chars
+    });
+  });
+
+  describe("createMD5Hash", () => {
+    it("should create correct MD5 hash", () => {
+      expect(createMD5Hash(testPassword)).toBe(md5Hash);
+      expect(createMD5Hash("")).toBe("d41d8cd98f00b204e9800998ecf8427e"); // empty string hash
+    });
+  });
+
+  describe("hashPassword", () => {
+    it("should hash password with bcrypt", async () => {
+      const hashedPassword = await hashPassword(testPassword);
+      expect(hashedPassword).toMatch(/^\$2b\$/);
+      expect(hashedPassword.length).toBe(60); // bcrypt hash length
+    });
+
+    it("should generate different hashes for same password", async () => {
+      const hash1 = await hashPassword(testPassword);
+      const hash2 = await hashPassword(testPassword);
+      expect(hash1).not.toBe(hash2);
+    });
+  });
+
+  describe("comparePasswords", () => {
+    it("should compare bcrypt passwords correctly", async () => {
+      const hashedPassword = await hashPassword(testPassword);
+      expect(await comparePasswords(testPassword, hashedPassword)).toBe(true);
+      expect(await comparePasswords("wrongpassword", hashedPassword)).toBe(
+        false,
+      );
+    });
+
+    it("should compare MD5 passwords correctly", async () => {
+      expect(await comparePasswords(testPassword, md5Hash)).toBe(true);
+      expect(await comparePasswords("wrongpassword", md5Hash)).toBe(false);
+    });
+
+    it("should handle empty passwords correctly", async () => {
+      const emptyHash = await hashPassword("");
+      expect(await comparePasswords("", emptyHash)).toBe(true);
+      expect(await comparePasswords(testPassword, emptyHash)).toBe(false);
+    });
+  });
+
+  describe("migrateMD5Hash", () => {
+    it("should migrate MD5 hash to bcrypt", async () => {
+      const bcryptHash = await migrateMD5Hash(testPassword);
+      expect(bcryptHash).toMatch(/^\$2b\$/);
+      expect(await comparePasswords(testPassword, bcryptHash)).toBe(true);
+    });
+
+    it("should generate different bcrypt hashes for same password", async () => {
+      const hash1 = await migrateMD5Hash(testPassword);
+      const hash2 = await migrateMD5Hash(testPassword);
+      expect(hash1).not.toBe(hash2);
+    });
+  });
+});
diff --git a/tsconfig.json b/tsconfig.json
index 8b827bf..e0af2fe 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,51 +1,52 @@
 {
-    // TypeScript Compiler Options
-    "compilerOptions": {
-        /* Basic Options */
-        "target": "ES2022",                      // Specify ECMAScript target version
-        "module": "commonjs",                 // Specify module code generation
-        "lib": ["es6"],                // Specify library files to be included
-        "allowJs": true,                      // Allow JavaScript files to be compiled
-        "jsx": "react",                       // Support JSX in React projects
-        "sourceMap": true,                    // Generate corresponding '.map' files
-        "outDir": "./dist",                   // Redirect output structure to the 'dist' directory
-        "rootDir": "./src",                   // Specify the root directory of input files
-        "removeComments": true,               // Do not emit comments to output
-        "noEmit": false,                      // Do not emit outputs
+  // TypeScript Compiler Options
+  "compilerOptions": {
+    /* Basic Options */
+    "target": "ES2022", // Specify ECMAScript target version
+    "module": "commonjs", // Specify module code generation
+    "lib": ["es6"], // Specify library files to be included
+    "allowJs": true, // Allow JavaScript files to be compiled
+    "jsx": "react", // Support JSX in React projects
+    "sourceMap": true, // Generate corresponding '.map' files
+    "outDir": "./dist", // Redirect output structure to the 'dist' directory
+    "rootDir": "./src", // Specify the root directory of input files
+    "removeComments": true, // Do not emit comments to output
+    "noEmit": false, // Do not emit outputs

-        /* Strict Type-Checking Options */
-        "strict": true,                       // Enable all strict type-checking options
-        "noImplicitAny": true,                // Raise error on expressions and declarations with an implied 'any' type
-        "strictNullChecks": true,             // Enable strict null checks
-        "strictFunctionTypes": true,          // Enable strict checking of function types
-        "strictBindCallApply": true,          // Enable strict 'bind', 'call', and 'apply' methods
-        "strictPropertyInitialization": true, // Enable strict checking of property initialization
+    /* Strict Type-Checking Options */
+    "strict": true, // Enable all strict type-checking options
+    "noImplicitAny": true, // Raise error on expressions and declarations with an implied 'any' type
+    "strictNullChecks": true, // Enable strict null checks
+    "strictFunctionTypes": true, // Enable strict checking of function types
+    "strictBindCallApply": true, // Enable strict 'bind', 'call', and 'apply' methods
+    "strictPropertyInitialization": true, // Enable strict checking of property initialization

-        /* Additional Checks */
-        "noUnusedLocals": true,               // Report errors on unused local variables
-        "noUnusedParameters": true,           // Report errors on unused parameters
-        "noImplicitReturns": true,            // Report error when not all code paths in function return a value
-        "noFallthroughCasesInSwitch": true,   // Report errors for fallthrough cases in switch statements
+    /* Additional Checks */
+    "noUnusedLocals": true, // Report errors on unused local variables
+    "noUnusedParameters": true, // Report errors on unused parameters
+    "noImplicitReturns": true, // Report error when not all code paths in function return a value
+    "noFallthroughCasesInSwitch": true, // Report errors for fallthrough cases in switch statements

-        /* Module Resolution Options */
-        "moduleResolution": "node",           // Use Node.js module resolution strategy
-        "baseUrl": "./",                      // Base directory to resolve non-absolute module names
-        "paths": {                            // A series of entries which re-map imports to lookup locations
-            "@/*": ["src/*"]
-        },
-        "typeRoots": ["./node_modules/@types"], // List of folders to include type definitions from
-        "esModuleInterop": true,              // Enable esModule interoperability
-
-        /* Experimental Options */
-        "experimentalDecorators": true,       // Enable experimental support for decorators
-        "emitDecoratorMetadata": true,         // Emit design-type metadata for decorated declarations
-        "forceConsistentCasingInFileNames": true
+    /* Module Resolution Options */
+    "moduleResolution": "node", // Use Node.js module resolution strategy
+    "baseUrl": "./", // Base directory to resolve non-absolute module names
+    "paths": {
+      // A series of entries which re-map imports to lookup locations
+      "@/*": ["src/*"]
     },
-    "include": [
-        "src/**/*"                            // Include all TypeScript files in 'src' directory
-    ],
-    "exclude": [
-        "node_modules",                       // Exclude 'node_modules' directory
-        "dist"                                // Exclude 'dist' directory
-    ]
-}
\ No newline at end of file
+    "typeRoots": ["./node_modules/@types"], // List of folders to include type definitions from
+    "esModuleInterop": true, // Enable esModule interoperability
+
+    /* Experimental Options */
+    "experimentalDecorators": true, // Enable experimental support for decorators
+    "emitDecoratorMetadata": true, // Emit design-type metadata for decorated declarations
+    "forceConsistentCasingInFileNames": true
+  },
+  "include": [
+    "src/**/*" // Include all TypeScript files in 'src' directory
+  ],
+  "exclude": [
+    "node_modules", // Exclude 'node_modules' directory
+    "dist" // Exclude 'dist' directory
+  ]
+}
